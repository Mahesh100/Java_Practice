
# All the interfaces and class in collection framework are present in java.util package.

# ArrayList stores data in the form of indexed based positions

# Set store data in the form of hash code values

# Map stores data in the form of objects as key and values pairs

# Lambada Expression are usually passed as a parameters to functions.

# The main objective of introducing lambada expression in java is to bring functional programming feature in java.
  As java is Object oriented programming language which doesn't supports functional programming features (But other languages already supports functional programming features)

# To invoke Lambada expression we need functional interface.
  To call the lambada expression we use only functional interface.



# Difference between ArrayList and LinkedList

--> ArrayList:
1) Arraylist class inherit the features of the list interface as it implements list interface.
2) The underlying data structure of the arraylist class is resizable or growable array.
3) Arraylist class provide better performance for the add and search operations
4) Arraylist class has default capacity of 10
5) Arraylist class implements RandomAccess interface.

--> LinkedList:
1) Linked-list class inherit the features of list and queue as it implements list and dequeue interface.
2) The underlying datastructures of linked-list is doubly liked list.
3) Linked-list class provide better better performance of insertion and deletion operation from middle.
4) There is no default size of linked-list class.
5) Linked list class does not implements RandomAccess interface.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Collection Hierarchy

 - Collection Hierarchy starts with collection interface

 - Three basic interfaces which implements this collection iterface are
     -List
     -Queue
     -Set


  readOnlyArrayList = Collections.unmodifiableList(ArrayList);


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # Map in Java

  - Map is interface which is present in java.util package
  - Map does not inherit collection interface.
  - Syntax of Map :

     package java.util*;

     public interface Map{
       //methods
     }

  - Map was introduce in jdk 1.2 version
  - Hierarchy of Map interface

  Implemented classes of Map interface are :

                                     Map (Interface)
                                      |
                                      |
             --------------------------------------------------------------------------------------------------------
             |                                                      |                                               |
             |  (Implements)                                        |                                               |
          HashMap class                                          SortedMap  (Interface)                          HashTable
             |                                                      |
             |    (Inherit)                               Navigable Map (Interface)
       LinkedHashMap class                                          |
                                                                    |  (Inherit)
                                                                 TreeMap class


  - Implemented classes of Map interface are HashMap class, LinkedHashMap class, TreeMap class and HashTable
  - TreeMap class inherit the SortedMap and Navigable Map interfaces


# Properties of Map interface

- Map interface stores the data in Key value pairs
- In map interface key is unique and value can be duplicate
- If we have duplicate key in map then the previous key will be replace with new one.
- In Map we store maximum 1 null key
- In Map we can have multiple null values
- In Map we insert both key values null at same time , null = null
- Map does not follows sorting and insertion order.
-

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Lambada Expressions

 - Lambada expression is anonymous function which doesn't have function name, return type, access modifier and which does not return any value.
 - Lambada expression also called as nameless function.
 - Lambada Expression is Short block of code which takes the parameter and returns the value.
 - Lambada Expression are similar to methods but they do not need name and it can be implemented right in the body of method.
 -
 - Simple lambada expression contains single parameter and an expression :

   parameter -> expression

   -To use more than one parameter wrap them in parentheses:
   (parameter1, parameter2) -> expression

   - Expression are limited they have to immediately return the value.

   - If the Lambada expression need to return the value then code block should have the return statement

   (parameter1, parameter2)n -> { code block }

  -In lambada expression no need to define data types of variables
   Java  compiler automatically find the data types of variables based on context.


     (a,b) -> System.out.println(a+b);


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Functional Interface In Java

 - Functional Interface is used to invoke lambada expression in java.

 - A interface which contains only one single abstract method called as functional interface.

 - From java 7 we can declare default and static methods in interface.

 - Default functional interfaces in java :

     1) Runnable  having run() abstract method
     2) Callable  having call() abstract method
     3) Comparable having compareTo() abstract method.
     4) ActionListener having actionPerformed() abstract method.

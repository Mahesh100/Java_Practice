
 # Definition :
     - Lambada expression is anonymous function which doesn't have name of method, return type and no return value, no access modifier.

     - Lambada Expression is mainly used for to implement Functional Interface.

     - Lambada expression is always associated with functional interface.

 Objective :
     - To bring functional programming features
     - To improve Code optimization/we can write concise code

- The main objective of introducing lambada expression in java is to bring functional programming feature in java.

- Using lambada expression we can achieve functional programming features in java.

- Generally java is object oriented programming language and the data will be stored in Classes and Objects
  But,in functional programming language the data will be stored in functions and variables

- As java is Object oriented programming language which doesn't supports functional programming features (But other languages already supports
  functional programming features)

- Lambada expression are passed as a parameters to functions.

- To invoke Lambada expression we need functional interface.

- Lambada expression helps to avoid boiler plate code

- If method body have only one statement then we can remove the curly brackets

# Steps to make any expression as lambada expression

 1) Remove access modifier
 2) Remove return type
 3) Remove method name
 4) Place arrow

# General way of writing method in java :

 public void methodName(){

    System.out.println("Welcome");
 }

  With Lambada expression:

Example 1:

   () -> {
                 System.out.println("Welcome");
         }

   () -> {System.out.println("Welcome");}

   More concise way

   ()-> System.out.println("Welcome");


Example 2:

    public void method2(int a, int b)
        {
            System.out.println(a+b);
        }

        (int a, int b) -> System.out.println(a+b);

        More Concise way

        (a,b)-> System.out.println(a+b);   //jvm automatically specifies type of variable based on
                                           // on context at runtime


Example 3:

    public void method1(int a)
     {
        return(a*a);
     }

     (a)-> { return(a*a);};       //when use return statement it must be include in curly{ } braces.

     more Concise way
     (a) -> (a*a);   or  a -> a*a;



# Design Pattern in java

 - Design pattern are nothing but the tried test and well documented solutions to the commonly occurring problem
                                                    OR
 - Design pattern are the well proved solutions of commonly occurring problem in software design.
                                                    OR
 - Design pattern is the way to handle commonly occurring problem while creating software.

 - Design pattern represent idea.

 - There are 3 main categories in design pattern :

   1) Creational Design pattern
   2) Structural Design pattern
   3) Behavioral Design pattern


[1] Creational Design pattern :->
    - Creational design patterns focuses on object creation mechanism.
    - This pattern is used to define and control how objects are created during class instantiation.

    1) Singleton design pattern  **
    2) Factory method design pattern  **
    3) Abstract Factory method design pattern **
    4) Builder design pattern **
    5) Prototype design pattern **


 1) Singleton design pattern:
    -Singleton design pattern is a design pattern which restrict the instantiation of the class and ensure that the
     only one instance/object is present in java virtual machine.

    -Singleton pattern is often used is logging, caching and configuration.

    To create singleton class which implement singleton design pattern

      i) Create a private static variable of class type : This variable will store the single instance of the class
       - This variable is static because method is static and we can not use non-static variable inside the static context(method)

      ii)Create a private constructor : This private constructor will prevent the class from instantiated from outside of the class.

      iii) Create a public static method of class type which will return the instance of the class.
           This method will check if instance is already created if not then the method will create it.

           -Here method is static because it belongs to class not object and
            if method is non-static we have to create object of class to access the method
            outside of the class.

 2) Factory Method Design Pattern
    -The Factory Method design pattern in Java is a creational design pattern that provides an interface for creating objects in a superclass,
     but allows subclasses to alter the type of objects that will be created.

 3) Abstract Factory Method Design Pattern
    -The Abstract Factory design pattern is a creational design pattern in Java that provides an interface for creating
     families of related or dependent objects without specifying their concrete classes.

 4) Builder Design Pattern
    -Builder Design Pattern in java is creational design pattern used to build complex objects step by step.

 5) Prototype design pattern
    - The Prototype design pattern is a creational design pattern in Java that focuses on creating new objects by copying an existing object,
    known as the prototype.


----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

   2) Structural Design pattern :-> How to structure the code

      1) Adapter Design pattern   # IMP **
      2) Bridge Design pattern          **
      3) Composite Design pattern # IMP  **
      4) Decorator Design pattern # IMP  **
      5) Facade Design pattern    # IMP  **
      6) Flyweight Design pattern # IMP  **
      7) Proxy Design pattern     # IMP  **



----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------


   3) Behavioral Design pattern :-> Focuses on object interaction more

      1) Chain of Responsibility   **
      2) Command **
      3) Iterator**
      4) Mediator**
      5) Memento **
      6) Observer **
      7) State  **
      8) Strategy **
      9) Template method **
      10) Visitor**
      11) Interpreter **


----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------


1] Creational Design Pattern :---------------------->

  1) Single Ton design pattern
     - Constructor of the class should be private in nature
     - Method in class should be public static in nature
     - Variables/fields in class are private static in nature

   # There are two ways of creating singleton object

   1) Eager way    2) Lazy way

   1)Eager way : Static variable get initialize first

   2)Lazy way  : In lazy way object is created only when method get called
                 - It is not thread safe


# How to break SingleTon design pattern

 1) Using reflection API
    Solution: If object exists then throws exception from inside constructor
              Use enum

 2) Using Deserialization
    Solution: Override read resolve method

 3) Using Object cloning
    Solution :


   2) Factory Design Pattern     (Part of Creational Design Pattern)

   - When there is super class and multiple child classes and we have to create objects of
     child class based on certain input/requirement


     Advantages :


----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

2] Structural Design Pattern
   - Structural Design Pattern focuses on how classes and objects composed together to form larger, more flexible and efficient structure.

   5) Facade Design Pattern
      - The Facade design pattern in Java is a structural design pattern that provides a simplified, unified interface to a set of interfaces in a complex subsystem.
        It acts as a single entry point, hiding the complexities of the underlying implementation/system and making the system easier to use for clients.

      - When we want to hide the system complexity from the client facade design pattern is used.

      - Facade class is not mandatory to use. We should not force client to use facade to interact with sub classes.
      - While using facade design pattern all the complexity will go to facade interface.

   6) Flyweight Design Pattern
      - The flyweight design pattern is a structural pattern that minimizes memory usage by sharing data between multiple objects.
        It does this by separating the intrinsic (shared) state from the extrinsic (unique) state of an object.

----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
3] Behavioral Design Pattern :
    - Behavioral Design patter guides how objets communicate with each other effectively and distribute task
      efficiently making software system more flexible and easy to maintain.

    1) Chain of responsibility design pattern
    - Chain of responsibility design pattern behavioral design pattern that allows an object to pass a request along a chain of potential handlers
      Until one of them handles it.

    2) Strategy Design Pattern
    - In strategy design pattern a common interface is define which have one or more method in interface.
    - In strategy design pattern we have one common interface known as "Strategy Interface" and "Concrete Strategy Class"
      these classes implements strategy interface which provides specific implementation for different algorithms.
    - Strategy design pattern defines different different strategies.
    -
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

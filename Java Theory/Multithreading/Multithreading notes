# Multi threading in java

- By default JVM will provide name to thread automatically
- We can set name to any thread using Thread.currentThread().setName("Mahesh");   //Mahesh is name of thread here


# Multitasking
- Performing multiple task at single time is called multitasking
- Multitasking increases the performance of CPU

- We can achieve multitasking by two ways :

    1) Process based multitasking  (Multi Processing)
    2) Thread based multitasking   (Multi Threading)

 1) Process Based multitasking (Multi Processing)
 - When one system is connected to multiple processors in order to complete the task.
 - It is best suitable at system level

   # Process (Program)[Ex VLC] :
   - Process is combination of multiple small small task (threads)


 2) Thread based multitasking (Multi threading)

 # Thread:
   - Executing multiple threads at same time is called multithreading


   Example :

   class VLC{
        public static void main(String [] args)
        {

        }

        class Video   (Thread 1)
        {
            void playVideo()
            {

            }
        }

        class Music  (Thread 2)
        {
            void startMusic()
            {

            }
        }
   }

   - Multi threading is best suitable is programming level
   - In java we have predefine API's for multithreading so we don't need to do internal coding, we have to implement only classes and interfaces
     to achieve multithreading in java

     Example : Thread class
               Runnable interface
               Thread Group class
               Concurrency package
               Thread pool (Executor framework)


----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

# Difference between process and Thread

# process :
 - The executing program is called process
 - Process is heavy weight
 - Process takes more time for context switching
 - Process takes more time for inter process communication.
 - Each process has different address space
 - Process are not dependent on each other
 - Process does not require synchronization
 - Process consume more resources
 - Process require more time for creation
 - Process takes more time for termination

# Thread :
 - Sub part of process is called thread
 - Thread is light weight.
 - Thread takes less time for context switching
 - Thread takes less time for inter thread communication
 - Thread share same address space.
 - Threads are dependent on each other
 - Threads may require synchronization
 - Resource consumption is less in threads
 - Threads takes less time for creation
 - Thread takes less time for termination


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Steps to create thread in java

1) Step: 1  Define class by extending Thread class

  public class Test extends Thread
  {
        Step: 2  Override run() method
        public void run()
        {
            //Tast
            System.out.println("Thread task");
        }

        public static void main(String [] args)
        {
            Step 3: Create Object of class
            Test t = new Test();

            Step: 4 Invoke run() method using object.start() method

            t.start();
        }
  }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



 # Thread class constructor and  methods

 # Syntax

 public class Thread implements Runnable
 {

    # Constructors

    # Basic thread constructor

    1) Default constructor
    Thread();

    2) Second constructor
    Thread(Runnable target)

    3) Third constructor
    Thread(String name)      //For providing thread name

   # Thread group related constructor

    4) Fourth constructor  (For runnable interface)
    Thread(Runnable target, String name)

    5) Fifth constructor  (Related thread group)
    Thread(ThreadGroup tg, Runnable target)

    6) Sixth constructor
    Thread(ThreadGroup tg, String name)

    7) Seventh Constructor
    Thread(ThreadGroup tg, Runnable target, String name)

    8) Eighth constructor
    Thread(ThreadGroup tg, Runnable target, String name, long StackSize)

    # Methods

    # Basic methods
    1) run() method
    2) start() method  //It is synchronise method

    # Naming method
    3) currentThread() method  (static method and provides thread reference)    [These are Native method]  {Native methods are the one whose
    4) isAlive()              //  return boolean value                          [These are Native method]   implementation is not in java language but
    5) getName()                                                                                            in some other language}
    6) setName(String name)

    # Daemon thread methods
    7) isDemon()
    8) setDemon(boolean value)

    # Priority based methods
    9) getPriority()
    10) setPriority(int value)

    # Preventing thread execution methods
    11) sleep() method
    12) yield()
    13) join()      //Deprecated suspend() , resume() destroy()

    # Thread Interrupting  methods
    14) interrupt(), isInterrupt()  interpreted()

    # Inter thread communication method
    # Present in object class

    1) wait()
    2) notify()
    3) notifyAll()

 }


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Get Current Thread

   class Test extends Thread
   {
   public void run()
   {
   System.out.println("Task");
   }
}
   public static void main(String [] args)
   {
        System.out.println(Thread.currentThread().getName());
        Thread.currentThread().setName("Thread-1");

        Test t = new Test();
        t.start();
   }


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Daemon Thread in java

 - Threads which run in background of another thread
 - Use: Daemon thread provides service to thread

 Example:
 Garbage Collector, Finalizer, Attach Listener, Signal dispatcher

  -Garbage collector is service thread(Daemon) which executes in background which provides the service
   as it will restrict main thread from any potential memory problem.
   It will delete waste object and free the memory

# Methods in daemon thread

 # public final void setDaemon(boolean value)   //return type void

 # public final boolean isDaemon()     //return boolean value

 class Test extends Thread
 {
     public void run()
     {
        System.out.println("Child Thread");
     }

     public static void main(String [] args)
     {
             System.out.println("Main Thread");

             Test t = new Test();
             t.setDaemon(true);   //alway create before start() method
             t.start()
     }
 }


 # Cases :

 Case 1:
 - We have to create daemon thread before start() method
 - If we create thread after start() method then it will throw runtime exception as IllegalStateException
 - We can not create main thread as demon thread as main thread already started and
   we have to create daemon thread before starting the thread.

 - Life of daemon thread depends up on another thread( on whose background it is running(Parent thread))

 - Daemon thread inherits the properties from its parent thread

 - JVM is not dependent on daemon thread.

 - Daemon should have low priority, but we can change it according to our need

# Multi threading in java

- By default JVM will provide name to thread automatically.
- We can set name to any thread using Thread.currentThread().setName("Mahesh");   //Mahesh is name of thread here


# Multitasking
- Performing multiple task at single time is called multitasking
- Multitasking increases the performance of CPU

- We can achieve multitasking by two ways :

    1) Process based multitasking  (Multi Processing)
    2) Thread based multitasking   (Multi Threading)

 1) Process Based multitasking (Multi Processing)
 - When one system is connected to multiple processors in order to complete the task.
 - It is best suitable at system level

   # Process (Program)[Ex VLC] :
   - Process is instance of program that is getting executed
   - Process is combination of multiple small small task (threads)

   - Every time a process get created they allocate their own memory/resources
   - Each process has its own heap memory
   - One process has multiple threads
   - When process is created, it starts with one thread and that thread is known as 'main' thread
     and from main thread we can create multiple threads to perform task concurrently


 2) Thread based multitasking (Multi threading)

 # Thread:
   - Executing multiple threads at same time is called multithreading


   Example :

   class VLC{
        public static void main(String [] args)
        {

        }

        class Video   (Thread 1)
        {
            void playVideo()
            {

            }
        }

        class Music  (Thread 2)
        {
            void startMusic()
            {

            }
        }
   }

   - Multi threading is best suitable at programming level
   - In java we have predefine API's for multithreading so we don't need to do internal coding, we have to implement only classes and interfaces
     to achieve multithreading in java

     Example : Thread class
               Runnable interface
               Thread Group class
               Concurrency package
               Thread pool (Executor framework)


----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

# Difference between process and Thread

                 Process                                                                                    Thread

 - The executing program is called process                                              - Sub part of process is called thread
 - Process is heavy weight                                                              - Thread is light weight.
 - Process takes more time for context switching                                        - Thread takes less time for context switching
 - Process takes more time for inter process communication.                             - Thread takes less time for inter thread communication
 - Each process has different address space                                             - Thread share same address space.
 - Process are not dependent on each other                                              - Threads are dependent on each other
 - Process does not require synchronization                                             - Threads may require synchronization
 - Process consume more resources                                                       - Thread Consumes less resources
 - Process require more time for creation                                               - Threads takes less time for creation
 - Process takes more time for termination                                              - Thread takes less time for termination



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    # Memory management in Multi Threading

    - In java JVM have  multiple memory areas like Stack, Heap , Code segment, Data Segments, Registers and program counters etc

    - Whenever a process is created a new JVM instance get created.
    - Whenever a process is created a new JVM instance is created and  allocated to that process.
    - And each JVM  instance has all this areas

    - How much heap memory allocated to process?

      - We can define the memory allocation

         -Xms<size>
          This will set the initial size
          Suppose we have set 256MB then :  java -Xms256m -Xmx2g MainClassName

         -Xmx<size>
          This will allocate Max heap size

          If process is required to allocate more memory then outOffMemory error will come even though JVM heap have 10Gb of memory

    - Suppose in process we have multiple threads like p1,p2 and p3
      Then,
          - Register, Stack and Counter are local to each thread

          - Code Segment, Data Segment and heap memory is shared among all three threads p1,p2,and p3

    - What is Code Segment
      - Code Segment contains the compiled BYTECODE (machine code of java program)
      - Code segment is read only
      - All threads within the same process share the same code segment

    - What is Data Segment
      - Contains the GLOBAL and Static variables
      - All the process within the same process share the same data segment
      - Threads can read and modify teh same data
      - Synchronization is required between multiple threads

    Heap :
    - Whenever a thread create new object using 'new' keyword so for object a space is allocated into a heap area
    - Heap is shared among all the threads of same process
    - Heap is not shared among the two different process


    Stack (What is Stack)
    - Each thread has their own stack area
    - Stack manages method calls, local variables
    - Each thread has its own stack


    Register : (What is Register)
    - When JIT (Just In Time) compiler converts the ByteCode into native machine code, it uses register to optimized the
      generated machine code.
    - Register is used to store intermediate values
    - Register also helps in context switching
    - Each thread has its own Register


   Counter : (What is Counter)
   - Also known as Program Counter, it points to the instruction which is  getting executed
   - Increments its counter after successfully execution of instruction
   - Points to the instructions which is to be executed means
       we know that  Code Segment has machine code which hash to be executed, each thread in program
       is running some part of code so what part of code a thread have to run the counter points the address
       of that instruction in code segment (Counter tells to thread ok you have to run this particular part)



   # Complete Flow :
    Suppose I have written on java code having file name as Main.java
    Inside Main.java code we have small code segments which executing different parts of code
    like T1, T2 and T3 etc threads

    1) To run java code we have to do   javac Main.java  (Compile)
       Here byte code get generated

    2) Now when we are executing java Main.java  then Process will be created
       Now once the process is created then the JVM instance get allocated and JVM instance have
       heap memory and lets say we have allocated heap memory as -Xms<size> of 1GB
       So JVM instance has Code Segment, Data Segment etc
       -Currently this process don't have Threads
       Now, JIT which is inside JVM will start compiling the code and converting it to ByteCode to Machine Code
       While it is converting byte code to machine code it will create respective threads for Progress (lets say 3)
       - So for each thread a Register , Stack and counter will be assign by the JVM.
         JVN will create threads while converting the Byte code to Machine code

    3) Now the this machine code generated is saved into code segment by JVM
       so code segment hava the machine code which CPU understands
       Now the counter of particular code points to address of machine code inside the Code Segment
       - Each counter have the address of code segment where the threads has to start working

    4) Now

    //Todo








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Steps to create thread in java

1) Step: 1  Define class by extending Thread class

  public class Test extends Thread
  {
        Step: 2  Override run() method
        public void run()
        {
            //Tast
            System.out.println("Thread task");
        }

        public static void main(String [] args)
        {
            Step 3: Create Object of class
            Test t = new Test();

            Step: 4 Invoke run() method using object.start() method

            t.start();
        }
  }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Thread class constructor and  methods

 # Syntax

 public class Thread implements Runnable
 {

    # Constructors

    # Basic thread constructor

    1) Default constructor
    Thread();

    2) Second constructor
    Thread(Runnable target)

    3) Third constructor
    Thread(String name)      //For providing thread name

   # Thread group related constructor

    4) Fourth constructor  (For runnable interface)
    Thread(Runnable target, String name)

    5) Fifth constructor  (Related thread group)
    Thread(ThreadGroup tg, Runnable target)

    6) Sixth constructor
    Thread(ThreadGroup tg, String name)

    7) Seventh Constructor
    Thread(ThreadGroup tg, Runnable target, String name)

    8) Eighth constructor
    Thread(ThreadGroup tg, Runnable target, String name, long StackSize)

    # Methods

    # Basic methods
    1) run() method
    2) start() method  //It is synchronise method

    # Naming method
    3) currentThread() method  (static method and provides thread reference)    [These are Native method]  {Native methods are the one whose
    4) isAlive()              //  return boolean value                          [These are Native method]   implementation is not in java language but
    5) getName()                                                                                            in some other language}
    6) setName(String name)

    # Daemon thread methods
    7) isDemon()
    8) setDemon(boolean value)

    # Priority based methods
    9)  getPriority()
    10) setPriority(int value)

    # Preventing thread execution methods
    11) sleep() method
    12) yield()
    13) join()      //Deprecated suspend() , resume() destroy()

    # Thread Interrupting  methods
    14) interrupt(), isInterrupt()  interpreted()

    # Inter thread communication method
    # Present in object class

    1) wait()
    2) notify()
    3) notifyAll()

 }


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Get Current Thread

   class Test extends Thread
   {
   public void run()
   {
   System.out.println("Task");
   }
}
   public static void main(String [] args)
   {
        System.out.println(Thread.currentThread().getName());
        Thread.currentThread().setName("Thread-1");

        Test t = new Test();
        t.start();
   }


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Daemon Thread in java

 - Threads which run in background of another thread
 - Use: Daemon thread provides service to current thread

 Example:
 Garbage Collector, Finalizer, Attach Listener, Signal dispatcher

  -Garbage collector is service thread(Daemon) which executes in background which provides the service
   as it will restrict main thread from any potential memory problem.
   It will delete waste object and free the memory

# Methods in daemon thread

 # public final void setDaemon(boolean value)   //return type void

 # public final boolean isDaemon()     //return boolean value

 class Test extends Thread
 {
     public void run()
     {
        System.out.println("Child Thread");
     }

     public static void main(String [] args)
     {
             System.out.println("Main Thread");

             Test t = new Test();
             t.setDaemon(true);   //always create before start() method
             t.start()
     }
 }


 # Cases :

 Case 1:
 - We have to create daemon thread before start() method
 - If we create thread after start() method then it will throw runtime exception as IllegalStateException
 - We can not create main thread as demon thread as main thread already started and
   we have to create daemon thread before starting the thread.

 - Life of daemon thread depends up on another thread( on whose background it is running(Parent thread))

 - Daemon thread inherits the properties from its parent thread

 - JVM is not dependent on daemon thread.

 - Daemon should have low priority, but we can change it according to our need


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Thread Priorities

- Priorities are represented in the form of Integer values and ranges from 1 to 10
  Where,

  1  is MIN_PRIORITY
  5  iS NORM_PRIORITY
  10 is MAX_PRIORITY   //These constants are provided by java

  //Not priority for thread (Not exists)
  0, < 1, >10, LOW_Priority, Normal_Priority, Maximum_priority, High_PRIORITY

- Priority of thread is a integer number given to thread.
- Every thread has its own priority
- JVM sets the priority to each thread.
- According to priority JVM will allocate processor to thread
- Priorities are inherited from parent thread
- By default priority of main thread is 5 (NORM_PRIORITY)
- If multiple threads have same priority then it is depend on JVM to give first priority to threads
- Windows does not supports priority
- Priority depends up on platform

# Methods for Priority

public final void setPriority()

public final int getPriority()


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Prevent Thread Execution method in java

1) sleep() method

- In thread class we have two sleep methods
  means sleep() method overloaded

  Method 1

  public static native void sleep(long mili) throws InterruptedException

  Method 2

  public static void sleep(long miliSeconds, int nanoSeconds) throws InterruptedException

  Both are static methods so we can call both methods directly from thread class

  class Test
  {
    public static void main(String [] args)
    {
    for(int i=1; i<=5;i++)
    {
    try{
        Thread.sleep(1000);
      System.out.println(i);
      }
      catch(Exception e)
      {
      System.out.println(e);
      }
    }
    }
  }

- sleep() method will throw InterruptedException

- While thread is in sleep mode it does not release lock

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # yield() method

 - This method will stop current running/executing thread and give chance to other thread for execution

 Working of yield method

 - In java 5, yield method used sleep() method internally
 - In java 6, Thread provided the hint to thread scheduler then it depends on thread scheduler to accept or ignore the hint

# Method

public static native void yield();

- output may be different each time

public class Test extends  Thread{

    public void  run(){
        for(int i=0; i<=5; i++){
            System.out.println(Thread.currentThread().getName());
          //  System.out.println(i);
        }


    }

    public static void main(String[] args) {
        Test t = new Test();
        t.start();

        for(int i=0; i<5; i++)
        {
            Thread.yield();
            System.out.println("Main Thread");
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# join() method in multi threading

- join() method is used when if thread wants to wait for another thread to complete its task

# Methods : (Overloaded)

1) public final void join() throws InterruptedException{}

2) public final synchronized void join(long mili) throws InterruptedException{}

3) public final synchronized void join(int mili, long nano) throws InterruptedException{}

public class  Test extends Thread{

    public void run()
    {
        try{
            for(int i=1; i<=5; i++)
            {
                System.out.println("Child Thread");
                Thread.sleep(1000);
            }
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }

    public static void main(String [] args) throws InterruptedException {
        Test t = new Test();
        t.start();
        t.join();
        try{
            for(int i=1; i<=5; i++)
            {
                System.out.println("Main Thread");
                Thread.sleep(1000);

            }
        }catch(Exception e)
        {
            System.out.println(e);
        }

    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Difference between sleep() yield() and join() method

  - All three methods will temporary stops the execution

  Property                               sleep()                                                              yield()                                                                       join()

1) Purpose               If any thread does not want to perform operation                 It stops current executing thread and provides chance                      If one thread wants to wait for another thread to complete its
                         for particular time                                              of another thread of same priority or higher priority to execute           task

2) Example               Timer,PPT                                                        Licence department

3) How the thread       -Invokes automatically as per given time period                   Automatically invoke by thread scheduler                                    Automatically invoked after completion of another thread task
   invoke again         -If thread is interrupted                                                                                                                     After completion of given time period
                                                                                                                                                                      If thread is interrupted

4) Methods              native sleep(long mili)                                                   yield()                                                                    join()
                        sleep(long mili, int nano)                                                                                                                    join(long mili)
                                                                                                                                                                      join(long mili, int nano)

5) If overloaded        Yes                                                                No                                                                          Yes

6) Exception            InterruptedException                                               N/A                                                                         InterruptedException

7) is final()           No                                                                 No                                                                          Yes

8) is static            Yes                                                                Yes                                                                         No

9) is Native            Yes                                                                Yes                                                                         No


----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

 # interrupting methods in java

 - It is use to interrupt an existing thread
 - Interrupt method works only when the thread is in sleep() or wait() state
 - If thread is not is in sleeping or waiting state then calling interrupt method will perform normal behavior
 - Interrupt method always throws InterruptedException (Checked exception/ handle using try-catch block)
 - public void interrupt()

 Example :

 class Test extends Thread
 {
      public void run()
      {
     try {
                 for (int i = 1; i <= 5; i++)
                 {
                     if(i>3)
                     {
                         Thread.interrupted();
                     }else
                     {
                         System.out.println(i);

                       //  Thread.sleep(3000);
                     }
                 }
        }catch(Exception e)
        {
          System.out.println(e);
          }
        }

        public static void main(String [] args)
        {
          Test t = new Test();
          t.start();
        }
      }
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

# Synchronization in java

 # Program without Synchronization

public class BookTheaterSeat {
    int total_seats = 10;
    void bookSeat(int seats)
    {
        if(total_seats>=seats)
        {
            System.out.println("Seats booked successfully");
            total_seats = total_seats-seats;
            System.out.println("Left seats: "+total_seats);
        }else {
            System.out.println("Seats can not be booked");
            System.out.println("Seats Left "+total_seats);
        }
    }
}


public class MovieBookApp extends Thread{

   static BookTheaterSeat b;
   int seats;
    public void run(){

        b.bookSeat(seats);

    }

    public static void main(String[] args) {
            b= new BookTheaterSeat();

            MovieBookApp deepak = new MovieBookApp();
            deepak.seats=7;
            deepak.start();

            MovieBookApp mahesh = new MovieBookApp();
            mahesh.seats=12;
            mahesh.start();

            MovieBookApp amit = new MovieBookApp();
            amit.seats = 6;
            amit.start();
    }
}


- Synchronization is process by which we can control the accessibility of multiple threads of particular resource.
- Without synchronization Data inconsistency and multiple thread interference problem may occur
- Advantages of synchronization :
        Avoid data inconsistency problem
        No thread interference

-Disadvantages of Synchronization:
    Increase the waiting time period of threads
    Create performance problems

 # Synchronization can be archived by using two ways:

 1) Process Synchronization
 2) Thread Synchronization

   2) Thread Synchronization divided into two parts:
      i)  Mutual Exclusive
      ii) Cooperation
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

 I] Mutual Exclusive Synchronization


 # Synchronize methods in java

 1) Synchronized method
    - Any method with synchronized keyword is known as synchronized method
    - In java every object have unique lock
    - In object there are two areas as
          i) Synchronized area
          ii) Non-Synchronized area


2) Synchronize block in java

 - Need Of Synchronize block:
   - In synchronize block lock is on object level
   - If we want to make only particular lines of code synchronise
   - Apply synchronization at only impacted area
   - It reduces thread waiting time
   - Scope of synchronise() block is less than scope of synchronise method


 3) Static Synchronization :
    -In static synchronization lock is at class level
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

 II] Co-operation (Inter thread Communication )

   - Inter thread communication can be achieved by
       1) wait()
       2) notify();
       3) notifyAll();

   - Inter thread communication is mechanism by which a running thread which have a lock acquired will release its lock and went into waiting state and another thread
     will acquire a lock and soon as this thread completes its execution it will send a notification to first thread and first thread now starts its execution.

   - Inter-thread communication is mechanism in which a thread releases the lock and enter into paused state
   - All this methods are not methods of Thread class, this are present in Object class


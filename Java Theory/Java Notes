## Object class is the parent class of all the classes in java.


# Static Blocks in java

- Static blocks or static initialise blocks are used to initialise static fields in java

- Static blocks are get executed exactly once when the class is loaded
- Whenever the JVM loads the class, static blocks get executed.
- Class can have any number of static blocks.
- The order of execution of the static blocks depends on the order of static block
  placed in given code.
- Static block get executed even before the constructor of the class get executed.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Abstraction

- If method in a class don't have body it then must be declared as abstract

      abstract void start();

 - A method without body (No implementation) is known as Abstract methods.

 - If class have any abstract method then class should be mark with  abstract Keyword.

 - Abstract classes can not be instantiated, we can not create object of an abstract class.

# Interface
- The mechanism to achieve abstraction is known as interface.  (-Interface is used to achieve abstraction.)
- We can not create object of interface.
-Interface supports multiple inheritance/ Interface used to implement multiple inheritance
-Interface used to achieve loose coupling.
-Interface is the blue print of the class which tells class what to do, but it does not show/tell class how to implement a particular task
- We can not create concerte methods in interface
- All the methods in interface are public abstract types

-All the fields/variables in interface are by default public static final;

--->>>> In java 8 version

- We can create default conerate methods

     default display() {
        System.out.println("Display");
     }

  - We can create static methods inside interface.

     static void run(){
     System.out.println("I am running");
     }

--->>>> In java 9 version

 -In java 9 version we can use
 private void run() {

 }
# Syntax

interface InterfaceName {

  public abstract method();

  public static final filedName;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Difference between Abstract class and Interface

 1) Abstract class can have Abstract and non abstract methods.
 2) Abstract class doesn't support multiple inheritance.
 3) Abstract class can have final, non-final , static and non-static variables.
 4) Abstract class can provide implementation of interface.
 5) Abstract class can be declared using 'Abstract' keyword.
 6) Abstract class can be extended using 'extend' keyword.


 1) Interface can only have abstract methods. From java 8 we can use default and static methods and from
    Java 9 we can use private methods in interface
 2) Interface supports multiple inheritance.
 3) Interface only have static and final variables.
 4) Interface can not provide implementation of interface
 5) Interface can be declared using 'Interface' keyword.
 6) Interface can be implemented using 'Implement' keyword.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Exception in java

1) Any unwanted or unexpected event which disturbs the normal flow and execution of program is called Exception.

    -At compile time exception never occurs, all the exception occurs at the runtime.

 # Exception :
-Exception occurs because of program
-Exceptions are recoverable / We can handle the exception.
-Exception are of two types :
   i)  Compiletime exception (Checked exception )      //Remember both starts with C
   ii) Runtime exception     (Unchecked exception)

 # Error
-Error occurs because of lack of resources.(System ram)
-Errors are not recoverable / Errors can not be handled
-Error is only of single type -Runtime exception (Unchecked exception)

2) Difference between Checked exception and Unchecked exception

   i)  Checked Exception : (Compile time exception)
       - Checked exception are the exception which are checked and handle at the compile time.
       - Checked exception must be caught or declared using throws keyword
       - Checked exception handle using try-catch block or throws keyword.
       - When checked exception occurs, program flow is interrupted and transfer to catch block.
       - Examples :
           -ClassNotFoundException
           -IoException


   ii) Unchecked Exception : (Runtime exception)
       - Unchecked exception are the exception which are not handle at compile time.
       - Unchecked exception do need to required  handle explicitly.
       - When unchecked exception occurs program flow is halted with an error message.
       - Examples:
            -ArrayIndexOutOfBoundException
            -NullPointerException



2) Exception hierarchy

                                                                Object  (Object is parent class of all classes in java)
                                                                  |
                                                                  |
                                                              Throwable
                                                                  |
                                                                  |
                                              -------------------------------------------------------
                                              |                                                     |
                                              |                                                     |
                                          Exception                                               Error
                                      (Because of program)                                 (Because of System Resources)
                                             |                                                      |
                                             |                                                  Unchecked exception (Runtime exception)
                      -------------------------------------------------------
                      |                                                     |
                      |                                                     |
                Checked Exception                                   Unchecked Exception
                (Compile Time exception)                            (Runtime Exception)



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Difference between Final , Finally and Finalize in java

   # Final
   - Final is key word in java.
   - Final keyword can be used with
       - Variables
       - Methods
       - Classes


   # Finally
   - Finally is block in java.
   - Finally block is used along with try-Catch blocks
   - Finally block always executed irrespective of the exception will occurs in try block or not
   - In finally block we always write cleanup code.
      - Closing DB connections
      - Closing open files



   # Finalize
   - Finalize is method in java.
   - Finalize method is called by garbage collector to destroy unused objects.
   - Finalize method is used to write clean up codes.


 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Multithreading in java.

 - For the Maximum utilization of CPU/Memory java allows concurrent execution of two or more parts of program
   this feature in java is called Multithreading in java.
 -

 - Multithreading is feature in java that allows concurrent execution of two or more part of program for maximum utilization cpu/memory.
 -Each part of such program is called thread
 -So threads are light weight processes within the process.


 Threads can be created by using two mechanism :
  1) By extending thread class
  2) By implementing runnable interface.

  // Java code for thread creation by extending
  // the Thread class
  class MultithreadingDemo extends Thread {
  	public void run()
  	{
  		try {
  			// Displaying the thread that is running
  			System.out.println(
  				"Thread " + Thread.currentThread().getId()
  				+ " is running");
  		}
  		catch (Exception e) {
  			// Throwing an exception
  			System.out.println("Exception is caught");
  		}
  	}
  }

  // Main Class
  public class Multithread {
  	public static void main(String[] args)
  	{
  		int n = 8; // Number of threads
  		for (int i = 0; i < n; i++) {
  			MultithreadingDemo object
  				= new MultithreadingDemo();
  			object.start();
  		}
  	}
  }


-> We can start thread twice
- This will throw illegalThreadStateException

 - Threads will use methods such as wait(), notify() and notifyAll() to communicate with each other


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  # Generics in java

  - In Generics everything is happen at compilation level.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Cursors
 -If we want to print element in collection one by one then we have to use Cursors

 Types of Cursors :

 1] Iterator
 2] ListIterator
 3] Enumeration

 # Iterator in Java

 - The object which is used to loop through a collection like ArrayList and HashMap is called Iterator

 - The iterator() method is used to get iterator for any collection.

 -


  * Difference between Iterator and ListIterator

  List l = new ArrayList();

  # Iterator
       Iterator it = l.iterator();

  1] We can get the Iterator cursor using .iterator() method.
  2] Iterator cursor can be used with any collection objects
  3] In iterator method we have methods like
         next()
         hasNext()
         remove()    methods
  4] Using Iterator cursor we can retrieve elements using only forward direction.
  5] By using Iterator cursor we can only retrieve and remove elements.





  # ListIterator

  1] We can get ListIterator cursor  using .listIterator() method
  2] ListIterator can be used only with list implemented classes.  i.e ArrayList, LinkedList, Vector, Stack.
  3] In ListIterator we have methods as :  (total 6)
                next()
                hasNext()
                hasPrevious()
                previous()
                remove()
                set()

  4] Using ListIterator cursor we can retrieve collection elements in both forward and backward direction.
  5] By using listIterator cursor we can retrieve, remove, replace and add collection elements.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Lambada Expression

 - Lambada Expression is the anonymous function. It is function without name and it does not belong to class
   or object.

 - Lambada Expression is mainly used for to implement Functional Interface.

 # Functional Interface

 - A interface which contains exactly one abstract method is called functional interface.

 - Functional interface can contain any number of default and static methods.

 # Stream API



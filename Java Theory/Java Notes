

## Object class is the parent class of all the classes in java.

# Lambada Expression are usually passed as a parameters to functions.

# The main objective of introducing lambada expression in java is to bring functional programming feature in java.
  As java is Object oriented programming language which doesn't supports functional programming features (But other languages already supports functional programming features)

# To invoke Lambada expression we need functional interface.
  To call the lambada expression we use only functional interface.

# The super keyword can be used to call a method on the superclass of the current class.

# Static block is used for static initialization of classes

# code inside the static block is executed only once: the first time the class is loaded into memory.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Access modifiers in java

   1) Public
   2) Private
   3) Protected
   4) Default

  1) Public access modifiers mean that the class, method, or variable can be accessed from
    anywhere in the program.

  2) Private access modifiers mean that the class, method, or variable can only be
    accessed from within the same class.

  3) Protected access modifiers mean that the class, method, or variable can be
     accessed from within the same package and by subclasses of the class.

  4) Default access modifiers mean that the class, method, or variable can
     be accessed from within the same package.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Different Types of Variables in Java

 1) Local Variables
 2) Instance Variables
 3) Static Variables

 1) Local Variable:  (Declared Inside the method body)
     -A variable defined within block of code, method or constructor is called local variable in java.

     -These variables are created when execution is enters into the block of code or method is called
       and destroyed when execution comes cutoff block of code.

     -The scope of this variables are only withing the block of code in which the variables are declared.

     - Initialization of local variable is mandatory before using it in defined scope.

  2) Instance Variable:  (Declared outside the method and inside the class)

       - Instance variable are non-static variables which declared outside of any method, constructor or block
       - Instance variables can be accessed only by creating objects.
       - We initialize instance variables using constructors while creating an object.
          We can also use instance blocks to initialize the instance variables.

  3) Static Variables:
      - Variables which are declared using static keyword are called static variables in java.
      - Static variables are used for memory management
      -

   the static variable is initialized before the instance variable,
   and the instance variable is initialized before the local variable.

   Static -> Instance -> Local

  Class TypeOfVariables{

       Static int c =30;

       int a = 10; //instance variable

       public static void main(String [] args)
       {
           int b =20;   //Local Variable


           System.out.println(b);
           System.out.println(c);

           TypeOfVariables obj = new TypeOfVariables();

            System.out.println( obj.a);
       }

  }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Looping in java

 # While Loop

  -While loop is pre-test loop
  -It check the condition first before execution enters into body of loop
  -While loop is used when we don't know the number of iterations in advanced.
  -While loop is also known as entry control loop

 # Syntax

   while(condition)  //if condition is true
   {
    //statement
   }

   #Flow chart

                        Start
                          |
                          |
                  |---Condition     //Until condition true
                  |       |  (True)
                  |       |
                  -----Statement


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # Do While loop

  - Do while loop is post test loop
  - Here we first execute the statement/code block then it will check the condition.
  - Do while loop is used when we want to execute loop body at least once even condition is false
  - It is also known as exit control loop.


  #Syntax

  do
  {
  // Statement
  }
  while(Condition);

   #Flow chart

                        Start
                          |
                          |
                  |---Statement
                  | (True)|  (True)
                  |       |
                  ----Condition
                          | (False)
                          |
                         End

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Constructor in Java

- Constructor is block of code having same name as that of class name.
- The main purpose of Constructor is to initialize the object in java
- Every java class has a default constructor
- A constructor is automatically called at the time of object creation
- Constructor does not have any return type.

- 4 Types of constructor in java

 -private constructor
 -default constructor
 -parametrized constructor
 -copy constructor

 # We can call one constructor from another constructor by two ways

 - this() keyword : Using this() keyword

  -super() keyword : Using super() keyword

-Syntax

    class ClassName()
    {
    className();
    }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Advantage of Java 11 over java 8

 -Java 11 includes a number of performance improvements, such as a new garbage collector called ZGC and
  a new HTTP client. These improvements can make Java applications run faster and more efficiently.

 -Java 11 is a long-term support (LTS) release, which means that it will be supported by Oracle for at least eight years.
 -Java 11 applications can start up to 25% faster than Java 8 applications.


# New Features in java 11


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Static Blocks in java

- Static blocks or static initialise blocks are used to initialise static fields in java

- Static blocks are get executed exactly once when the class is loaded
- Whenever the JVM loads the class, static blocks get executed.
- Class can have any number of static blocks.
- The order of execution of the static blocks depends on the order of static block
  placed in given code.
- Static block get executed even before the constructor of the class get executed.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Abstraction

- If method in a class don't have body it then must be declared as abstract

      abstract void start();

 - A method without body (No implementation) is known as Abstract methods.

 - If class have any abstract method then class should be mark with  abstract Keyword.

 - Abstract classes can not be instantiated, we can not create object of an abstract class.

# Interface
- The mechanism to achieve abstraction is known as interface.  (-Interface is used to achieve abstraction.)
- We can not create object of interface.
- Interface supports multiple inheritance/ Interface used to implement multiple inheritance
- Interface used to achieve loose coupling.  (IMP)
- Interface is the blue print of the class which tells class what to do, but it does not show/tell class how to implement a particular task
- We can not create concerte methods in interface
- All the methods in interface are  " public abstract " types
- All the fields/variables in interface are by default "public static final" ;


- Interface supports multiple inheritance

--->>>> In java 8 version

- We can create default conerate methods

     default void display() {
        System.out.println("Display");
     }

  - We can create static methods inside interface.

     static void run(){
     System.out.println("I am running");
     }

--->>>> In java 9 version

 -In java 9 version we can use
 private void run() {

 }
# Syntax

interface InterfaceName {

  public abstract method();

  public static final filedName;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Difference between Abstract class and Interface

 1) Abstract class can have Abstract and non abstract methods.
 2) Abstract class doesn't support multiple inheritance.
 3) Abstract class can have final, non-final , static and non-static variables.
 4) Abstract class can provide implementation of interface.
 5) Abstract class can be declared using 'Abstract' keyword.
 6) Abstract class can be extended using 'extend' keyword.


 1) Interface can only have abstract methods. From java 8 we can use default and static methods and from
    Java 9 we can use private methods in interface
 2) Interface supports multiple inheritance.
 3) Interface only have static and final variables.
 4) Interface can not provide implementation of interface
 5) Interface can be declared using 'Interface' keyword.
 6) Interface can be implemented using 'Implement' keyword.


 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # When to use Abstract class and when to use Interface in java

 Abstract Class
 1) share code among the related classes,
 2) if require access modifier other than public (like protected & private)
 3) if you want to declare non-static or non-final fields.

 4) If we know partial implementation of the class but not complete implementation then abstract class is good choice

 Interface
 1) Implements interface with unrelated classes such as Serializable, Cloneable
 2) If you want to take advantage of multiple inheritance

 Note: many classes use both abstract classes and interfaces like HashMap class
 implements several interface and also extends abstract class AbstractMap

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Marker Interface

 -An interface which does not contain any field, method or constants is called marker interface.
 - The Serializable and Cloneable interfaces are the example of marker interface.

 -It provides run-time type information about objects, so the compiler and JVM have additional information about the object.(tagging interface.)

 Marker interface is used as a tag that inform the Java compiler  a message so that it can add some special
 behavior to the class implementing it. Java marker interface are useful if we have information about the class
 and that information never changes, in such cases, we use marker interface represent to represent the same.
 Implementing an empty interface tells the compiler to do some operations.


 # Serialization in java

 - The process of converting object into series of bits is called serialization in java.

 - The object must be serialize to do following operations :

    1) Writing a object to a file
    2) Reading an object from file
    3) Writing an object to a network
    4) Reading an object to a network.

  - Class must implement java.io.serializable interface to make suitable object  (Marker interface)

  -In Java, a serialVersionUID is a unique identifier for each Serializable class that is used to verify
   that the saved object and the loaded class are compatible.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Callable Interface in java

-The Callable interface in Java is a functional interface that defines a single method, call(),
   which returns a value.
-The value can be obtained through Future<V> objects.
-In order to Return the result we use callable interface.

-Callable is similar to Runnable, but it can return a result and can throw checked exceptions
-Runnable cannot throw checked exceptions and does not return a result.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Encapsulation In Java

 - Encapsulation in java is mechanism by which we can wrap/bind data members and member function together in single class
   is called Encapsulation.

 - In order to achieve Encapsulation
     -data members/ fields should be private
     -Member function should be public in nature.

 - Any class in java is best example of Encapsulation in java.

 - Encapsulation prevents outer classes from accessing and changing fields and methods of a class.
   This also helps to achieve data hiding.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Exception in java

1) Any unwanted or unexpected event which disturbs the normal flow and execution of program is called Exception.

    -At compile time exception never occurs, all the exception occurs at the runtime.

 # Exception :
-Exception occurs because of program
-Exceptions are recoverable / We can handle the exception.
-Exception are of two types :
   i)  Compiletime exception (Checked exception )      //Remember both starts with C
   ii) Runtime exception     (Unchecked exception)

 # Error
-Error occurs because of lack of resources.(System ram)
-Errors are not recoverable / Errors can not be handled
-Error is only of single type -Runtime exception (Unchecked exception)

2) Difference between Checked exception and Unchecked exception

   i)  Checked Exception : (Compile time exception)
       - Checked exception are the exception which are checked and handle at the compile time.
       - Checked exception must be caught or declared using throws keyword
       - Checked exception handle using try-catch block or throws keyword.
       - When checked exception occurs, program flow is interrupted and transfer to catch block.
       - Examples :
           -ClassNotFoundException
           -IoException


   ii) Unchecked Exception : (Runtime exception)
       - Unchecked exception are the exception which are not handle at compile time.
       - Unchecked exception do need to required  handle explicitly.
       - When unchecked exception occurs program flow is halted with an error message.
       - Examples:
            -ArrayIndexOutOfBoundException
            -NullPointerException



2) Exception hierarchy

                                                                Object  (Object is parent class of all classes in java)
                                                                  |
                                                                  |
                                                              Throwable
                                                                  |
                                                                  |
                                              -------------------------------------------------------
                                              |                                                     |
                                              |                                                     |
                                          Exception                                               Error
                                      (Because of program)                                 (Because of System Resources)
                                             |                                                      |
                                             |                                                  Unchecked exception (Runtime exception)
                      -------------------------------------------------------
                      |                                                     |
                      |                                                     |
                Checked Exception                                   Unchecked Exception
                (Compile Time exception)                            (Runtime Exception)




-  A subclass can only throw the same exception or a narrower (more specific) exception than the one declared in the parent class method.
-  This is to ensure that the caller of the method is not surprised by a broader exception than they were expecting.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Difference between Final , Finally and Finalize in java

   # Final
   - Final is key word in java.
   - Final keyword can be used with
       - Variables
       - Methods
       - Classes


   # Finally
   - Finally is block in java.
   - Finally block is used along with try-Catch blocks
   - Finally block always executed irrespective of the exception will occurs in try block or not
   - In finally block we always write cleanup code.
      - Closing DB connections
      - Closing open files



   # Finalize
   - Finalize is method in java.
   - Finalize method is called by garbage collector to destroy unused objects.
   - Finalize method is used to write clean up codes.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Multitasking in java

 - Performing multiple task at single time.
 -
 # Multithreading in java.

 - For the Maximum utilization of CPU/Memory java allows concurrent execution of two or more parts of program
   this feature in java is called Multithreading in java.
 -

 - Multithreading is feature in java that allows concurrent execution of two or more part of program for maximum utilization cpu/memory.
 -Each part of such program is called thread
 -So threads are light weight processes within the process.


 Threads can be created by using two mechanism :

  1) By extending thread class (Thread class present in java.lang package)
  2) By implementing runnable interface.

  // Java code for thread creation by extending
  // the Thread class

  class MultithreadingDemo extends Thread {
  	public void run()
  	{
  		try {
  			// Displaying the thread that is running
  			System.out.println(
  				"Thread " + Thread.currentThread().getId()
  				+ " is running");
  		}
  		catch (Exception e) {
  			// Throwing an exception
  			System.out.println("Exception is caught");
  		}
  	}
  }

  // Main Class

  public class MultiThread {
  	public static void main(String[] args)
  	{
  		int n = 8; // Number of threads

  		for (int i = 0; i < n; i++) {
  			MultithreadingDemo object
  				= new MultithreadingDemo();
  			object.start();
  		}
  	}
  }


-> We can not start thread twice
- This will throw illegalThreadStateException

 - Threads will use methods such as wait(), notify() and notifyAll() to communicate with each other

 # Dead Lock In Java

 - If two threads are waiting for each other forever such situation is called Dead lock in java.

 - If Thread1 holding object 1 and Thread2 holding object 2 but Thread1 is waiting for object2 and Thread2 is waiting for object1 forever then we can say
   that Thread1 and Thread2 are in dead lock condition.

 - There is no complete re-solution for solving dead lock in java but several prevention techniques are possible.
 - Synchronized keyword is cause of dead lock in java, we have to use synchronised keyword carefully

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-The wait() method is provided by the Object class in Java.This method is used for inter-thread communication in Java.
 The java.lang.Object.wait() is used to pause the current thread,
 and wait until another thread does not call the notify() or notifyAll() method.
 Its syntax is given below.

  public final void wait()


 wait()
 1) The wait() method is defined in Object class.
 2) The wait() method releases the lock.

 sleep()
 1)The sleep() method is defined in Thread class.
 2)The sleep() method doesn't release the lock.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # Advantages of multithreading

  -Multithreading allows the faster execution of tasks, as threads execute independently.
  -Multithreading provides better utilization of cache memory as threads share the common memory resources.
  -Multithreading reduces the number of the required server as one server can execute multiple threads at a time.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Thread LifeCycle

 A thread can have one of the following states during its lifetime:

 -New: In this state, a Thread class object is created using a new operator, but the thread is not alive.
       Thread doesn't start until we call the start() method.

 -Runnable: In this state, the thread is ready to run after calling the start() method.
            However, the thread is not yet selected by the thread scheduler.

 -Running: In this state, the thread scheduler picks the thread from the ready state,
           and the thread is running.

 -Waiting/Blocked: In this state, a thread is not running but still alive, or it is
                   waiting for the other thread to finish.

 -Dead/Terminated: A thread is in terminated or dead state when the run() method exits.





-The Synchronized block can be used to perform synchronization on any specific resource of the method.
 Only one thread at a time can execute on a particular resource, and all other threads
 which attempt to enter the synchronized block are blocked.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  # Generics in java

  - In Generics everything is happen at compilation level.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Cursors
 -If we want to print element in collection one by one then we have to use Cursors

 Types of Cursors :

 1] Iterator
 2] ListIterator
 3] Enumeration

 # Iterator in Java

 - The object which is used to loop through a collection like ArrayList and HashMap is called Iterator

 - The iterator() method is used to get iterator for any collection.

 -


  * Difference between Iterator and ListIterator

  List l = new ArrayList();

  # Iterator
       Iterator it = l.iterator();

  1] We can get the Iterator cursor using .iterator() method.
  2] Iterator cursor can be used with any collection objects
  3] In iterator method we have methods like
         next()
         hasNext()
         remove()    methods
  4] Using Iterator cursor we can retrieve elements using only forward direction.
  5] By using Iterator cursor we can only retrieve and remove elements.





  # ListIterator

  1] We can get ListIterator cursor  using .listIterator() method
  2] ListIterator can be used only with list implemented classes.  i.e ArrayList, LinkedList, Vector, Stack.
  3] In ListIterator we have methods as :  (total 6)
                next()
                hasNext()
                hasPrevious()
                previous()
                remove()
                set()

  4] Using ListIterator cursor we can retrieve collection elements in both forward and backward direction.
  5] By using listIterator cursor we can retrieve, remove, replace and add collection elements.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Lambada Expression

   Objective :
    -To bring functional programming features
    - Code optimization/we can write concise code


 - To bring the functional programming features in java, lambada expression is introduced in java 8

 - Using lambada expression we can achieve functional programming features in java.

 - Generally in java, which is object oriented programming language.
   The data will be stored in Classes  and Objects

   But, in functional programming language the data will be stored in functions and variables

 - Lambada Expression is the anonymous function. It is function without name and it does not
   belong to class or object.

 - Lambada expression is anonymous function which doesn't have name of method, return type and no return value, no access modifier.

 - Lambada Expression is mainly used for to implement Functional Interface.

 - Lambada expression is always associated with functional interface.


 General way of writing method in java :

 public void methodName(){

    System.out.println("Welcome");
 }

  With Lambada expression:

   () -> {
                 System.out.println("Welcome");
         }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Functional Interface

   # Default Functional Interfaces in java

    1) Runnable interface  -----> run()     [method, only one abstract method]
    2) Callable interface  -----> call()
    3) Comparable interface ----> compareTo()
    4) ActionListener       ----> actionPerformed()


     - A interface which contains exactly one abstract method is called functional interface. (also contains defualt and static methods)

     - Functional interface can contain any number of default and static methods.
     - To call the lambada expression we need functional interface only
     - Lambada expressions can be invoked using functional interface.
     -

    # Predefine functional interfaces :

    1) Predicate
    2) Function
    3) Consumer
    4) Supplier

  1) Predicate is one of the pre-define functional interface in java.
     - It has abstract method called test();
     - To check certain conditions in lambada expression we use Predicate.
        interface Predicate(T)
        {

                public abstract boolean test(1 argument);

        }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Stream API

 - Stream API is one of the way in java 8 by which we can achieve implementation of functional programming in java.
 - Stream API in java 8 is set of classes and interfaces which are used to work with sequence of elements in functional
   and declarative way.
 -It allows to perform aggregate operations on collection of data using filtering, mapping, sorting etc

  There are two types of Operations perform in stream api as

      - Intermediate operations  : The operations which are used to transform or filter the stream of data is
                                    known as Intermediate operations
                                    map(), filter(), sorted(), distinct() etc

      - Terminal Operations  : The operations which are used at the end of stream pipeline is called Terminal Operations.
                                forEach(), collect(), reduce(), count() etc

      - Parallel Streams: The Stream API supports parallel execution of stream operations,
                          allowing for efficient processing of large datasets across multiple threads.

  # Advantages of Stream API

  - Stream API allow us complex data manupalation in concise and redable way.
  - Stream API used lazy evaluation meaning only process elements when needed.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Enums in Java

 - Enum is special type of data in java that can be used to represent the group of constants
 - Enum are useful when we have fixed set of values that are known at compile time
 - Enums make your code more readable and maintainable.


 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



# Design Pattern in java

 - Design pattern are the well proved solutions of commonly occurring problem in software design.
 - Design pattern is the way to handle commonly occurring problem while creating software.
 - Design pattern represent idea.
 -
   Three main categories in design pattern is :

   1) Creational Design pattern
   2) Structural Design pattern
   3) Behavioral Design pattern

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  # Single ton class in java


  A singleton class in Java is a class that can have only one object at a time.
  It is one of the five Creational Design patterns in Java which helps in effortless development
  of Java programs.

  Here are the steps on how to create a singleton class in Java:

  -Make the constructor private. This will prevent the class from being instantiated directly.
  -Create a private static variable of the class type. This will store the single instance of the class.
  -Create a public static method that returns the instance of the class. This method will check if the
    instance has already been created. If it has not, it will create it and store it in the private
    static variable. If it has already been created, it will simply return the existing instance.



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # SOLID Principle

  S - Single Responsibility Principle
  O - Open/Close Principle
  L - Liskov Substitution Principle
  I - Interface Segmented Principle
  D - Dependency Inversion Principle.

  S- Single Responsibility principle states that the class should have only one reason to change
     or it has only one responsibility

  O- Open/Closed Principle sates that



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


  # Apache Kafka

  - Kafka is open source even driven distributed streaming platform

  - Microservice 1 will produce the message and it will send to kafka broker  and Microservice 2 will
    consume that message from the kafka broker

                          Microservice 1    (Produce message)
                                |
                                |
                                |
                          Kafka Broker
                                |
                                |
                          Microservice 2     (Consume message)

  - There can be a lot of microservices that can consume kafka messages from the kafka broker.

  - In kafka we have Kafka cluster and this kafka cluster have one or more than one broker.

  - Here, producer will produce message and send it to kafka broker and the consumer basically
    consume those message from kafka broker.

  - Here we have "Topics" in kafka cluster and consumer will subscribe this topics from kafka cluster

  - In cluster we have one more important term called "Zookeeper", zookeeper basically mange the
    state of kafka broker inside the cluster

  - Apache kafka is fault tolerance

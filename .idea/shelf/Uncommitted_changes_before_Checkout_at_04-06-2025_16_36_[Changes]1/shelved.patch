Index: Java Theory/Java Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n# Java : Java is programming language which is used to develop various applications like desktop, web, stand alone applications\r\n         It is secure programming language which supports various features like oops,collections, multithreading etc.\r\n\r\n   OOPS : Object Oriented Programming System.\r\n\r\n\r\n## Object class is the parent class of all the classes in java.\r\n\r\n# Primitive variable like int a =10;  String s =\"abc\" doesn't hold any reference it just store value itself.  //Being variables in java\r\n\r\n# String Constant Pool (SCP) is present in Heap Memory Area.\r\n\r\n# Object are stored in Heap area but reference is created Stack area.\r\n\r\n   i) The object is stored in the heap.\r\n   ii) Reference is stored in stack which point to an object in heap.\r\n\r\n# Once the code execution get completed, the references from the stack area get deleted/clear\r\n\r\n# Lambada Expression are usually passed as a parameters to functions.\r\n\r\n# The main objective of introducing lambada expression in java is to bring functional programming feature in java.\r\n  As java is Object oriented programming language which doesn't supports functional programming features (But other languages already supports functional programming features)\r\n\r\n# To invoke Lambada expression we need functional interface.\r\n  To call the lambada expression we use only functional interface.\r\n\r\n# The super keyword can be used to call a method on the superclass of the current class.\r\n  -The super keyword refers to superclass (parent) objects. It is used to call superclass methods, and to access the superclass constructor.\r\n\r\n# Static block is used for static initialization of classes\r\n\r\n# code inside the static block is executed only once: the first time the class is loaded into memory.\r\n\r\n# Duplicate constructor is not allowed in class, we have to overload it.\r\n\r\n# We can overload constructor\r\n\r\n# Constructor is also use to initialise the class variables/Instance variables.\r\n\r\n# \"this\" keyword is used when we have to initialise the class variables or instance variables.\r\n\r\n# Whenever we create object of sub class it will call the constructor of Super(Parent) class as well as sub(Child) class\r\n\r\n# \"break\" statement is used to jump out off the loop\r\n\r\n# \"continue\" statement breaks the one iteration in loop if specified condition occur and continue with the next iteration of loop\r\n\r\n# By default maximum heap size is 64 Mb\r\n\r\n# compareTo() method in java is used to compare two string lexicographically.\r\n\r\n# *Static method in java can not be overridden\r\n   (Static method belongs to a class not a instances and hence can not be overridden in sub class)\r\n\r\n\r\n# Reflection in java\r\n-\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Instance Variable in java\r\n\r\n- In Java, an instance variable is a variable declared within a class but outside any method, constructor, or block.\r\n  It's called an \"instance\" variable because its value is unique to each instance (object) of the class.\r\n\r\nIn java, instance variable are used for several reasons\r\n\r\n- Instance variable are used to define properties and attributes of an object\r\n- By declaring the instance variable private we can control the access of instance variable from out side of class (Data Encapsulation).\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# Class loader in java\r\n\r\n- In Java, a class loader is a part of the Java Runtime Environment (JRE) responsible for dynamically loading Java classes into the Java Virtual\r\n  Machine (JVM) during runtime.\r\n- This means that classes are loaded only when they are needed, not all at once when the program starts.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # Access modifiers in java\r\n\r\n   1) Public\r\n   2) Private\r\n   3) Protected\r\n   4) Default\r\n\r\n  1) Public access modifiers mean that the class, method, or variable can be accessed from\r\n     anywhere in the program.\r\n\r\n  2) Private access modifiers mean that the class, method, or variable can only be\r\n     accessed from within the same class.\r\n\r\n  3) Protected access modifiers mean that the class, method, or variable can be\r\n     accessed from within the same package and by subclasses of the class.\r\n\r\n  4) Default access modifiers mean that the class, method, or variable can\r\n     be accessed from within the same package.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n# Different Types of Variables in Java\r\n\r\n 1) Local Variables\r\n 2) Instance Variables\r\n 3) Static Variables\r\n\r\n 1) Local Variable:  (Declared Inside the method body)\r\n     -A variable defined within block of code, method or constructor is called local variable in java.\r\n\r\n     -These variables are created when execution is enters into the block of code or method is called\r\n       and destroyed when execution comes out off block of code.\r\n\r\n     -The scope of this variables are only withing the block of code in which the variables are declared.\r\n\r\n     - Initialization of local variable is mandatory before using it in defined scope.\r\n\r\n  2) Instance Variable:  (Declared outside the method and inside the class)\r\n\r\n       - Instance variable are non-static variables which declared outside of any method, constructor or block\r\n       - Instance variables can be accessed only by creating objects.\r\n       - We initialize instance variables using constructors while creating an object.\r\n       - We can also use instance blocks to initialize the instance variables.\r\n\r\n  3) Static Variables:\r\n      - Variables which are declared using static keyword are called static variables in java.\r\n      - Static variables are used for memory management\r\n\r\n   the static variable is initialized before the instance variable,\r\n   and the instance variable is initialized before the local variable.\r\n\r\n   Static -> Instance -> Local\r\n\r\n  Class TypeOfVariables{\r\n\r\n       Static int c =30;\r\n\r\n       int a = 10; //instance variable\r\n\r\n       public static void main(String [] args)\r\n       {\r\n           int b =20;   //Local Variable\r\n\r\n\r\n           System.out.println(b);\r\n           System.out.println(c);\r\n\r\n           TypeOfVariables obj = new TypeOfVariables();\r\n\r\n            System.out.println( obj.a);\r\n       }\r\n\r\n  }\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# Looping in java\r\n\r\n # While Loop\r\n\r\n  -While loop is pre-test loop\r\n  -It check the condition first before execution enters into body of loop\r\n  -While loop is used when we don't know the number of iterations in advanced.\r\n  -While loop is also known as entry control loop\r\n\r\n # Syntax\r\n\r\n   while(condition)  //if condition is true\r\n   {\r\n    //statement\r\n   }\r\n\r\n   #Flow chart\r\n\r\n                        Start\r\n                          |\r\n                          |\r\n                  |---Condition     //Until condition true\r\n                  |       |  (True)\r\n                  |       |\r\n                  -----Statement\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n  # Do While loop\r\n\r\n  - Do while loop is post test loop\r\n  - Here we first execute the statement/code block then it will check the condition.\r\n  - Do while loop is used when we want to execute loop body at least once even condition is false\r\n  - It is also known as exit control loop.\r\n\r\n\r\n  #Syntax\r\n\r\n  do\r\n  {\r\n  // Statement\r\n  }\r\n  while(Condition);\r\n\r\n   #Flow chart\r\n\r\n                        Start\r\n                          |\r\n                          |\r\n                  |---Statement\r\n                  | (True)|  (True)\r\n                  |       |\r\n                  ----Condition\r\n                          | (False)\r\n                          |\r\n                         End\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n# Constructor in Java\r\n\r\n- Constructor is block of code having same name as that of class name.\r\n- The main purpose of Constructor is to initialize the object in java\r\n- Every java class has a default constructor\r\n- A constructor is automatically called at the time of object creation\r\n- Constructor does not have any return type.\r\n\r\n- \"this\" keyword is used in constructor\r\n    -To call another constructor in the same class\r\n    -To refer to the current class instance\r\n\r\n- 4 Types of constructor in java\r\n\r\n -private constructor\r\n -default constructor\r\n -parametrized constructor\r\n -copy constructor\r\n\r\n # *Constructor chaining in java\r\n    Calling one constructor from another constructor withing the same class using this() method.\r\n\r\n # We can call one constructor from another constructor by two ways\r\n\r\n - this() keyword : Using this() keyword\r\n\r\n  -super() keyword : Using super() keyword\r\n\r\n-Syntax\r\n\r\n    class ClassName()\r\n    {\r\n    className();\r\n    }\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# this keyword in java\r\n - this keyword in java returns the current class instance/object\r\n -  we can not use this inside static method.\r\n - this keyword represents the current object of the class.\r\n - this keyword is used to initialize the class variables or instance variables\r\n - this can be used to refer current class method\r\n - this can be used to invoke current class constructor\r\n -\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Super keyword in java\r\n\r\n- Super keyword refers the object of super class\r\n- Super keyword is used when we want to call the variable,method,constructor from super class using the sub class object\r\n\r\n- When to use :\r\n  -Super keyword is used only when the variable, method and constructor of sub class and super clas are same.\r\n  -To avoid the confusion between super class and sub class variables and methods that have same name we should use super keyword\r\n\r\n- Every constructor in sub class have the super() method by default.\r\n\r\n# Syntax\r\n\r\n  # Calling variable of super class using sub class object\r\n\r\nclass A {     //super class\r\n\r\n  int a = 20;\r\n\r\n}\r\n\r\nclass B extends A  // sub class\r\n{\r\n  int a =10;\r\n  void show()\r\n  {\r\n    System.out.println(a);\r\n    System.out.println(super.a);\r\n  }\r\n\r\n   public static void main(String [] args)\r\n   {\r\n        B obj = new B();\r\n        obj.show();\r\n   }\r\n}\r\n\r\n# To do (Super keyword for methods)\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # Advantage of Java 11 over java 8\r\n\r\n -Java 11 includes a number of performance improvements, such as a new garbage collector called ZGC and\r\n  a new HTTP client. These improvements can make Java applications run faster and more efficiently.\r\n\r\n -Java 11 is a long-term support (LTS) release, which means that it will be supported by Oracle for at least eight years.\r\n -Java 11 applications can start up to 25% faster than Java 8 applications.\r\n\r\n\r\n# New Features in java 11\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Static Blocks in java\r\n\r\n- Static blocks or static initialise blocks are used to initialise static fields in java\r\n\r\n- Static blocks are get executed exactly once when the class is loaded\r\n- Whenever the JVM loads the class, static blocks get executed.\r\n- Class can have any number of static blocks.\r\n- The order of execution of the static blocks depends on the order of static block\r\n  placed in given code.\r\n- Static block get executed even before the constructor of the class get executed.\r\n\r\n- Static keyword is a powerful tool that can be used to improve the memory management,\r\n  efficiency, and organization of your Java code.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# StringBuffer in java\r\n\r\n- StringBuffer is mutable in nature\r\n- StringBuffer is thread safe\r\n- StringBuffer implements Serializable and CharSequence interfaces\r\n- The principal operation for StringBuffer is to append and insert methods\r\n- The append() method will always add the object at the end of buffer\r\n- The insert() method adds the object at specific point\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------   OOPS CONCEPT  -----------------------------------------------------------------------------------------------------------------------------------\r\n\r\n1] Inheritance in Java\r\n\r\n  - Inheritance in java is mechanism by which one class acquires all the properties and behavior of another class is called inheritance\r\n\r\n  - Inheritance represents Is-A relationship which is also known as parent child relationship.\r\n  - For Method overriding inheritance is used (To achieve runtime polymorphism)\r\n  - Inheritance is used for code reusability.\r\n  - \"extends\" keyword is used to achieve the inheritance\r\n\r\n  - In java Single, multilevel and hierarchical inheritance are present in java\r\n  - Multilevel and Hybrid inheritance is achieved using interface only.\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n2] Abstraction\r\n\r\n- Abstraction in java is mechanism by which we can hide the implementation details and shows only essential details of the class to the user\r\n\r\n- If method in a class don't have body then it must be declared as abstract\r\n\r\n      abstract void start();\r\n\r\n - A method without body (No implementation) is known as Abstract methods.\r\n\r\n - If class have any abstract method then class should be mark with abstract Keyword.\r\n\r\n - Abstract classes can not be instantiated, we can not create object of an abstract class.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n3] Polymorphism in java\r\n - Polymorphism is commonly achieved in java by method overriding (run time polymorphism) and method over loading (Compile time polymorphism)\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n4] Encapsulation In Java\r\n\r\n - Encapsulation in java is mechanism by which we can wrap/bind data members and member function together in single class\r\n   is called Encapsulation.\r\n\r\n - In order to achieve Encapsulation\r\n     -data members/fields should be private\r\n     -Member function/methods should be public in nature.\r\n\r\n - Any class in java is best example of Encapsulation in java.\r\n\r\n - Encapsulation prevents outer classes from accessing and changing fields and methods of a class.\r\n   This also helps to achieve data hiding.\r\n\r\n# Getters and Setters in java\r\n\r\n   - In Java, Getters and Setters are the methods that provide controlled to access fields/variables of a class.\r\n     Getters and Setters are the fundamental part of the encapsulation principle in object oriented programming.\r\n\r\n   - A getter method retrieves (gets) the value of a private field.\r\n   - A setter method sets (updates) the value of a private field.\r\n\r\n  - To protect the data in class getters and setters are used.\r\n  - We can say that getter and setter are used to achieved encapsulation in class.\r\n  - We have to provide the public get and set methods to access and update the value of private variable in class.\r\n  - The get method returns the value of variable and set method will set the value of variable.\r\n  - To update the private class variables outside from the class we can use getters and setters.\r\n\r\n\r\nWhy Do We Need Getters and Setters?\r\n\r\nEncapsulation: By making fields private and providing public getter and setter methods, we can control how the fields are accessed and modified.\r\n               This ensures that the internal representation of the object is hidden from the outside.\r\n\r\nValidation: Setters can include validation logic to ensure that the fields are set to appropriate values.\r\n            This helps in maintaining the integrity of the object.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Interface in java\r\n\r\n- The mechanism to achieve abstraction is known as interface.  (-Interface is used to achieve abstraction.)\r\n- We can not create object of interface.\r\n- Interface supports multiple inheritance/ Interface used to implement multiple inheritance\r\n- Interface used to achieve loose coupling.  (IMP)\r\n- Interface is the blue print of the class which tells class what to do, but it does not show/tell class how to implement a particular task\r\n- We can not create concerete methods in interface\r\n- All the methods in interface are  \" public abstract \" types\r\n- All the fields/variables in interface are by default \"public static final\" ;\r\n\r\n\r\n- Interface supports multiple inheritance\r\n\r\n--->>>> In java 8 version\r\n\r\n- We can create default conerate methods\r\n\r\n     default void display() {\r\n        System.out.println(\"Display\");\r\n     }\r\n\r\n  - We can create static methods inside interface.\r\n\r\n     static void run(){\r\n     System.out.println(\"I am running\");\r\n     }\r\n\r\n--->>>> In java 9 version\r\n\r\n -In java 9 version we can use\r\n private void run() {\r\n\r\n }\r\n# Syntax\r\n\r\ninterface InterfaceName {\r\n\r\n  public abstract method();\r\n\r\n  public static final filedName;\r\n}\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # Difference between Abstract class and Interface\r\n\r\n 1) Abstract class can have Abstract and non abstract methods.\r\n 2) Abstract class doesn't support multiple inheritance.\r\n 3) Abstract class can have final, non-final , static and non-static variables.\r\n 4) Abstract class can provide implementation of interface.\r\n 5) Abstract class can be declared using 'Abstract' keyword.\r\n 6) Abstract class can be extended using 'extend' keyword.\r\n\r\n\r\n 1) Interface can only have abstract methods. From java 8 we can use default and static methods and from\r\n    Java 9 we can use private methods in interface\r\n 2) Interface supports multiple inheritance.\r\n 3) Interface only have static and final variables.\r\n 4) Interface can not provide implementation of interface\r\n 5) Interface can be declared using 'Interface' keyword.\r\n 6) Interface can be implemented using 'Implement' keyword.\r\n\r\n\r\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n # When to use Abstract class and when to use Interface in java\r\n\r\n Abstract Class\r\n 1) share code among the related classes,\r\n 2) if require access modifier other than public (like protected & private)\r\n 3) if you want to declare non-static or non-final fields.\r\n\r\n 4) If we know partial implementation of the class but not complete implementation then abstract class is good choice\r\n\r\n Interface\r\n 1) Implements interface with unrelated classes such as Serializable, Cloneable\r\n 2) If you want to take advantage of multiple inheritance\r\n\r\n Note: many classes use both abstract classes and interfaces like HashMap class\r\n implements several interface and also extends abstract class AbstractMap\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Marker Interface\r\n\r\n -An interface which does not contain any field, method or constants is called marker interface.\r\n -The Serializable and Cloneable interfaces are the example of marker interface.\r\n\r\n -It provides run-time type information about objects, so the compiler and JVM have additional information about the object.(tagging interface.)\r\n\r\n Marker interface is used as a tag  information to the Java compiler or a message so that it can add some special\r\n behavior to the class implementing it. Java marker interface are useful if we have information about the class\r\n and that information never changes, in such cases, we use marker interface to represent the same.\r\n Implementing an empty interface tells the compiler to do some operations.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Callable Interface in java\r\n\r\n-The Callable interface in Java is a functional interface that defines a single method, call() method - which returns a value.\r\n-The value can be obtained through Future<V> objects.\r\n-In order to Return the result we use callable interface.\r\n\r\n-Callable is similar to Runnable, but it can return a result and can throw checked exceptions\r\n-Runnable cannot throw checked exceptions and does not return a result.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # Serialization in java\r\n\r\n - The process of converting object into series of bits is called serialization in java.\r\n\r\n - The object must be serialize to do following operations :\r\n\r\n    1) Writing a object to a file\r\n    2) Reading an object from file\r\n    3) Writing an object to a network\r\n    4) Reading an object to a network.\r\n\r\n  - Class must implement java.io.serializable interface to make suitable object  (Marker interface)\r\n\r\n  - In Java, a serialVersionUID is a unique identifier for each Serializable class that is used to verify\r\n   that the saved object and the loaded class are compatible.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Exception in java\r\n\r\n1) Any unwanted or unexpected event which disturbs the normal flow and execution of program is called Exception.\r\n\r\n    -At compile time exception never occurs, all the exception occurs at the runtime.\r\n\r\n # Exception :\r\n-Exception occurs because of program\r\n-Exceptions are recoverable / We can handle the exception.\r\n-Exception are of two types :\r\n   i)  Compile time exception (Checked exception )      //Remember both starts with C\r\n   ii) Runtime exception     (Unchecked exception)\r\n\r\n # Error\r\n-Error occurs because of lack of resources.(System ram)\r\n-Errors are not recoverable / Errors can not be handled\r\n-Error is only of single type -Runtime exception (Unchecked exception)\r\n\r\n2) Difference between Checked exception and Unchecked exception\r\n\r\n   i)  Checked Exception : (Compile time exception)\r\n       - Checked exception are the exception which are checked and handle at the compile time.\r\n       - Checked exception must be caught or declared using throws keyword\r\n       - Checked exception handle using try-catch block or throws keyword.\r\n       - When checked exception occurs, program flow is interrupted and transfer to catch block.\r\n       - Examples :\r\n           -ClassNotFoundException\r\n           -IoException\r\n\r\n\r\n   ii) Unchecked Exception : (Runtime exception)\r\n       - Unchecked exception are the exception which are not handle at compile time.\r\n       - Unchecked exception do need to required handle explicitly.\r\n       - When unchecked exception occurs program flow is halted with an error message.\r\n       - Examples:\r\n            -ArrayIndexOutOfBoundException\r\n            -NullPointerException\r\n\r\n\r\n\r\n2) Exception hierarchy\r\n\r\n                                                                Object  (Object is parent class of all classes in java)\r\n                                                                  |\r\n                                                                  |\r\n                                                              Throwable\r\n                                                                  |\r\n                                                                  |\r\n                                              -------------------------------------------------------\r\n                                              |                                                     |\r\n                                              |                                                     |\r\n                                          Exception                                               Error\r\n                                      (Because of program)                                 (Because of System Resources)\r\n                                             |                                                      |\r\n                                             |                                                  Unchecked exception (Runtime exception)\r\n                      -------------------------------------------------------\r\n                      |                                                     |\r\n                      |                                                     |\r\n                Checked Exception                                   Unchecked Exception\r\n                (Compile Time exception)                            (Runtime Exception)\r\n\r\n\r\n\r\n\r\n-  A subclass can only throw the same exception or a narrower (more specific) exception than the one declared in the parent class method.\r\n-  This is to ensure that the caller of the method is not surprised by a broader exception than they were expecting.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n # Difference between Final , Finally and Finalize in java\r\n\r\n   # Final\r\n   - In Java, final is non-access modifier used to restrict modification\r\n   - When you define final variable, method or class its value can not be changed\r\n   - Final is key word in java.\r\n   - Final keyword can be used with\r\n       - Variables\r\n       - Methods\r\n       - Classes\r\n\r\n\r\n   # Finally\r\n   - Finally is block in java.\r\n   - Finally block is used along with try-Catch blocks\r\n   - Finally block always executed irrespective of the exception will occurs in try block or not\r\n   - In finally block we always write cleanup code.\r\n      - Closing DB connections\r\n      - Closing open files\r\n      - To close used resources finally block is used.\r\n\r\n   - There can only be one finally block, and it must follow the catch blocks.\r\n\r\n   # Finalize\r\n   - Finalize is method in java.\r\n   - Finalize method is called by garbage collector to destroy unused objects.\r\n   - Finalize method is used to write clean up codes.\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Aggregation in java\r\n\r\n- Aggregation is a type of association between classes.\r\n- In java, aggregation represents \"has-a\" relationship between two classes,\r\n  where one class contains reference to the another class\r\n\r\n- Reference class object can exists independently to the Container class object\r\n\r\n\r\n# Composition in java\r\n\r\n- In Java, composition is type of association between classes where one class contains the object of\r\n  another class\r\n- Composition represents the stronger relationship where contained object can not exists independently of\r\n  the container object\r\n\r\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n # Multitasking in java\r\n\r\n - Performing multiple task at single time.\r\n -\r\n # Multithreading in java.\r\n\r\n - For the Maximum utilization of CPU/Memory java allows concurrent execution of two or more parts of program\r\n   this feature in java is called Multithreading in java.\r\n -\r\n\r\n - Multithreading is feature in java that allows concurrent execution of two or more part of program for maximum utilization cpu/memory.\r\n - Each part of such program is called thread\r\n - So threads are light weight processes within the process.\r\n\r\n - A thread is a light weight subprocess that allow you to perform multiple task concurrently within the same application.\r\n\r\n - In Java, a Process represents an executing program or application.\r\n\r\n Threads can be created by using two mechanism :\r\n\r\n  1) By extending thread class (Thread class present in java.lang package)\r\n  2) By implementing runnable interface.\r\n\r\n  // Java code for thread creation by extending\r\n  // the Thread class\r\n\r\n  class MultithreadingDemo extends Thread {\r\n  \tpublic void run()\r\n  \t{\r\n  \t\ttry {\r\n  \t\t\t// Displaying the thread that is running\r\n  \t\t\tSystem.out.println(\r\n  \t\t\t\t\"Thread \" + Thread.currentThread().getId()\r\n  \t\t\t\t+ \" is running\");\r\n  \t\t}\r\n  \t\tcatch (Exception e) {\r\n  \t\t\t// Throwing an exception\r\n  \t\t\tSystem.out.println(\"Exception is caught\");\r\n  \t\t}\r\n  \t}\r\n  }\r\n\r\n  // Main Class\r\n\r\n  public class MultiThread {\r\n  \tpublic static void main(String[] args)\r\n  \t{\r\n  \t\tint n = 8; // Number of threads\r\n\r\n  \t\tfor (int i = 0; i < n; i++) {\r\n  \t\t\tMultithreadingDemo object\r\n  \t\t\t\t= new MultithreadingDemo();\r\n  \t\t\tobject.start();\r\n  \t\t}\r\n  \t}\r\n  }\r\n\r\n\r\n-> We can not start thread twice\r\n- This will throw illegalThreadStateException\r\n\r\n - Threads will use methods such as wait(), notify() and notifyAll() to communicate with each other\r\n\r\n # Dead Lock In Java\r\n\r\n - If two threads are waiting for each other forever such situation is called Dead lock in java.\r\n\r\n - If Thread1 holding object 1 and Thread2 holding object 2 but Thread1 is waiting for object2 and Thread2 is waiting for object1 forever then we can say\r\n   that Thread1 and Thread2 are in dead lock condition.\r\n\r\n - There is no complete re-solution for solving dead lock in java but several prevention techniques are possible.\r\n - Synchronized keyword is cause of dead lock in java, we have to use synchronised keyword carefully\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n-The wait() method is provided by the Object class in Java.This method is used for inter-thread communication in Java.\r\n\r\n The java.lang.Object.wait() is used to pause the current thread,\r\n and wait until another thread does not call the notify() or notifyAll() method.\r\n Its syntax is given below.\r\n\r\n  public final void wait();\r\n\r\n\r\n wait()\r\n 1) The wait() method is defined in Object class.\r\n 2) The wait() method releases the lock.\r\n\r\n sleep()\r\n 1)The sleep() method is defined in Thread class.\r\n 2)The sleep() method doesn't release the lock.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n  # Advantages of multithreading\r\n\r\n  -Multithreading allows the faster execution of tasks, as threads execute independently.\r\n  -Multithreading provides better utilization of cache memory as threads share the common memory resources.\r\n  -Multithreading reduces the number of the required server as one server can execute multiple threads at a time.\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n # Thread LifeCycle\r\n\r\n A thread can have one of the following states during its lifetime:\r\n\r\n - New             :   In this state, a Thread class object is created using a new operator, but the thread is not alive.\r\n                       Thread doesn't start until we call the start() method.\r\n\r\n - Runnable        :   In this state, the thread is ready to run after calling the start() method.\r\n                       However, the thread is not yet selected by the thread scheduler.\r\n\r\n - Running         :   In this state, the thread scheduler picks the thread from the ready state,\r\n                       and the thread is running.\r\n\r\n - Waiting/Blocked :   In this state, a thread is not running but still alive, or it is\r\n                        waiting for the other thread to finish.\r\n\r\n - Dead/Terminated :    A thread is in terminated or dead state when the run() method exits.\r\n\r\n\r\n\r\n\r\n\r\n-The Synchronized block can be used to perform synchronization on any specific resource of the method.\r\n Only one thread at a time can execute on a particular resource, and all other threads\r\n which attempt to enter the synchronized block are blocked.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Volatile keyword in java\r\n\r\n- Volatile keyword is used in java to indicate that the variables value can be modified by different threads.\r\n- Volatile keyword ensures that the changes made to the volatile variable by one thread are immediately visible to another thread.\r\n\r\n- The values of volatile variables never be cached.\r\n- Value of volatile keyword never read from cached but it is always read from the main memory.\r\n\r\nFor Example (Scenario)\r\n\r\n- Suppose we have two threads Thread-1 and Thread-2 and there is one shared variable of type Boolean which stored in main memory RAM of system.\r\n  Now these two threads interact with CPU and CPU interact with RAM and we have cache between CPU and RAM of both threads which reduces the\r\n  access time of values\r\n\r\n  so, whenever we have shared variable which exits in memory where multiple threads are trying to access the same variable and work on it depending\r\n  up on requirements. Initially the value of shared variable is stored as True in both the cache as well as memory\r\n\r\n  Now, we know that this two threads does not read the value of shared variable directly from the memory but instead read locally from their respective\r\n  cache memory.\r\n\r\n  Now suppose thread-2 changes the value of variable as false and it is updated in cache memory, but for other thread-1 the value is still true in its\r\n  cache memory and in main memory. So thread-2 will take some time to update the value of variable in main memory as false\r\n  but still thread-1 don't have any visibility that value is false so this will create a problem.\r\n\r\n  So,to overcome this problem java introduced volatile keyword\r\n  so volatile boolean True;\r\n  so now Thread-1 and Thread-2 directly read value from main memory instead of cache.\r\n  If in case Thread-2 will change the value of shared variable as false then Thread-1 will have access to it instantly.\r\n  This is how volatile keyword is used in java.\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n  # Generics in java\r\n\r\n  - In Generics everything is happen at compilation level.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Cursors/Iterator\r\n  - Iterator in java are used to iterate over the collection objects\r\n -If we want to print element in collection one by one then we have to use Cursors\r\n\r\n Types of Cursors :\r\n\r\n 1] Iterator\r\n 2] ListIterator\r\n 3] Enumeration\r\n\r\n # Iterator in Java\r\n\r\n - The object which is used to loop through a collection like ArrayList and HashMap is called Iterator\r\n\r\n - The iterator() method is used to get iterator for any collection.\r\n\r\n\r\n  * Difference between Iterator and ListIterator\r\n\r\n\r\n\r\n  # Iterator\r\n\r\n       List list = new ArrayList();\r\n\r\n       Iterator it = list.iterator();\r\n\r\n  1] We can get the Iterator cursor using .iterator() method.\r\n  2] Iterator cursor can be used with any collection objects\r\n  3] In iterator method we have methods like\r\n         next()\r\n         hasNext()\r\n         remove()    methods\r\n  4] Using Iterator cursor we can retrieve elements using only forward direction.\r\n  5] By using Iterator cursor we can only retrieve and remove elements.\r\n\r\n\r\n\r\n\r\n\r\n  # ListIterator\r\n\r\n  1] We can get ListIterator cursor using .listIterator() method\r\n  2] ListIterator can be used only with list implemented classes.  i.e ArrayList, LinkedList, Vector, Stack.\r\n  3] In ListIterator we have methods as :  (total 6)\r\n                next()\r\n                hasNext()\r\n                hasPrevious()\r\n                previous()\r\n                remove()\r\n                set()\r\n\r\n  4] Using ListIterator cursor we can retrieve collection elements in both forward and backward direction.\r\n  5] By using listIterator cursor we can retrieve, remove, replace and add collection elements.\r\n\r\n\r\n\r\n#  Enums in Java  (Enumeration)\r\n\r\n - Enumeration is special type of data type which is used to represents set of pre-define constants.\r\n - These constants typically related to fixed set of possible values of given concept.\r\n - Enum is special type of data type in java that can be used to represent the group of constants\r\n - Enum are useful when we have fixed set of values that are known at compile time\r\n - Enums make your code more readable and maintainable.\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n   # Collection in java\r\n\r\n   - Collection is group of objects or group of elements\r\n   - To store the group of objects or group of elements we used collections\r\n\r\n\r\n  # Ways of Creating List in java\r\n\r\n  1) List<Integer> intList = new ArrayList<Integer>();\r\n\r\n         intList.add(1);\r\n         intList.add(2);\r\n         intList.add(3);\r\n         intList.add(4);\r\n\r\n\r\n  2) List<Integer> inList = Arrays.asList(1,2,3,4);\r\n   -Arrays.asList() in Java is mutable\r\n\r\n\r\n  3) List<Integer> inList = List.Of(1,2,3,4);\r\n   -List.of() is immutable\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n---------------------------------------------------------------------- Functional Programming In Java -------------------------------------------------------------------------------\r\n\r\n # Lambada Expression\r\n\r\n   Objective :\r\n    - To bring functional programming features\r\n    - To improve Code optimization/we can write concise code\r\n\r\n - To bring the functional programming features in java, lambada expression is introduced in java 8\r\n\r\n - Using lambada expression we can achieve functional programming features in java.\r\n\r\n - Generally java is object oriented programming language.\r\n   The data will be stored in Classes  and Objects\r\n\r\n   But, in functional programming language the data will be stored in functions and variables\r\n\r\n - Lambada Expression is the anonymous function. It is function without name and it does not\r\n   belong to class or object.\r\n\r\n   # Definition :\r\n - Lambada expression is anonymous function which doesn't have name of method, return type and no return value, no access modifier.\r\n\r\n - Lambada Expression is mainly used for to implement Functional Interface.\r\n\r\n - Lambada expression is always associated with functional interface.\r\n\r\n\r\n General way of writing method in java :\r\n\r\n public void methodName(){\r\n\r\n    System.out.println(\"Welcome\");\r\n }\r\n\r\n  With Lambada expression:\r\n\r\nExample 1:\r\n\r\n   () -> {\r\n                 System.out.println(\"Welcome\");\r\n         }\r\n\r\n   () -> {System.out.println(\"Welcome\");}\r\n\r\n   More concise way\r\n\r\n   ()-> System.out.println(\"Welcome\");\r\n\r\n\r\nExample 2:\r\n\r\n    public void method2(int a, int b)\r\n        {\r\n            System.out.println(a+b);\r\n        }\r\n\r\n        (int a, int b) -> System.out.println(a+b);\r\n\r\n        More Concise way\r\n\r\n        (a,b)-> System.out.println(a+b);   //jvm automatically specifies type of variable based on\r\n                                           // on context at runtime\r\n\r\n\r\nExample 3:\r\n\r\n    public void method1(int a)\r\n     {\r\n        return(a*a);\r\n     }\r\n\r\n     (a)-> { return(a*a);};       //when use return statement it must be include in curly{ } braces.\r\n\r\n     more Concise way\r\n     (a) -> (a*a);   or  a -> a*a;\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # Functional Interface\r\n\r\n   # Default Functional Interfaces in java\r\n\r\n    1) Runnable interface  -----> run()     [method, only one abstract method]\r\n    2) Callable interface  -----> call()\r\n    3) Comparable interface ----> compareTo()\r\n    4) ActionListener       ----> actionPerformed()\r\n\r\n\r\n     - A interface which contains exactly one abstract method is called functional interface. (also contains default and static methods)\r\n\r\n     - Functional interface can contain any number of default and static methods.\r\n     - To call/invoke the lambada expression we need functional interface only\r\n     - Lambada expressions can be invoked using functional interface.\r\n     -\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Without defining functional interface we can write lambada expression also : using:-\r\n\r\n      Using pre-define functional interface we can use lambada expression without functional interface\r\n\r\n    # Java 8 have some Predefine functional interfaces :\r\n\r\n                                            When to choose                                                                    Method\r\n    1) Predicate                       - When we have some conditional Checks in program                                   test() method\r\n    2) Function                        - To perform certain operation and return value                                     apply() method\r\n    3) Consumer                        - When we have to consume/use the provided input but doesn't return any value       accept() method\r\n    4) Supplier                        - It represents a function which does not take in any argument                      get() method\r\n                                         but produces a value of type T.\r\n\r\n    - These interface have one abstract method each\r\n    - These pre-define functional interface are present in java.util.function package\r\n\r\n  1) Predicate is one of the pre-define functional interface in java.\r\n     - It has abstract method called test();\r\n     - To check certain conditions in lambada expression we use Predicate.\r\n        interface Predicate(T)   //T=Type (argument)\r\n        {\r\n\r\n                public abstract boolean test(1 argument);\r\n\r\n        }\r\n\r\n           - Predicate<T> is as default lambada expression\r\n           - Predicate is an interface which contains only one abstract method which is test() abstract method which always contain single parameter\r\n           - Predicate return boolean value\r\n\r\n              Predicate<String> pr = s->(s.length()>4);\r\n              System.out.println(pr.test(\"Welcome\"));  //true\r\n\r\n           - Predicate always return boolean values either true or false\r\n           - Predicate is used only when we have conditional checks in your program.\r\n\r\n\r\n  2) Function Interface:\r\n\r\n     - Function interface have one abstract method as apply() method.\r\n     - apply() method take any type of parameter and will return single value\r\n     -\r\n\r\n     interface Function<T,R>     //T - Type and R- Return type\r\n     {\r\n         apply(Type);\r\n     }\r\n\r\n  # Function Chaining\r\n\r\n     - we can chain the function\r\n     - andThen() method  straight order execution\r\n     - compose() method  reverse order execution\r\n\r\n\r\n  3) Consumer Functional Interfaces\r\n\r\n     - Consumer have one abstract  method called accept()\r\n     - Consumer is just accept some input do some processing but doesn't return any value\r\n     -\r\n\r\n\r\n  4) Supplier Functional interface\r\n\r\n      - In case of supplier it doesn't take any input/argument but it do some action and return some object\r\n      - Supplier represents a function/method which does not take in any argument but produces a value of type T.\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# forEach method in java 8\r\n\r\n-\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n # Stream API Java\r\n\r\n - Stream API is introduced in java 1.8 version\r\n\r\n - To processes the group of objects in collection we used Stream API concepts\r\n\r\n - Stream API is one of the way in java 8 by which we can achieve implementation of functional programming in java.\r\n - Stream API in java 8 is set of classes and interfaces which are used to work with sequence of elements in functional\r\n   and declarative way.\r\n\r\n - Stream API provides two different mechanism to process the data in collection as\r\n      1) filter\r\n      2) map\r\n\r\n - Stream API present in java.util package\r\n\r\n    1) filter :\r\n    - Suppose we have collection of objects as ArrayList have some integer objects\r\n       so if we use filter here then filter will filter data based up on certain condition and store it in some other collection\r\n\r\n    2) map :\r\n    -  Whatever data we have in collection that same data will be updated/modified and store in new targeted collection.\r\n\r\n   # Difference between filter and map in stream\r\n     1) In case of filter the data may be reduced\r\n     2) In case of map data will only get updated.\r\n\r\n    But we don't directly process data from the collection\r\n    We have stream , we will add all the objects from the collection to the stream and we will do all the operation on stream itself\r\n\r\n    - Here Stream is class in which different methods are available as filter, map.\r\n\r\n    Different methods available in stream class\r\n    -filter()                -map()               -sorted()              -count()       -reduce()\r\n\r\n    -collect()               -distinct()         -forEach()              -min()         -max()\r\n\r\n  - To process the data in the stream we use lambada expressions\r\n\r\n  1) filter() in stream class\r\n\r\n    - To process the data based up on certain condition we use filter()\r\n    - filter should happen based on certain condition\r\n\r\n\r\n -Stream API allows to perform aggregate operations on collection of data using filtering, mapping, sorting etc\r\n\r\n  There are two types of Operations perform in stream api as\r\n\r\n      - Intermediate operations  : The operations which are used to transform or filter the stream of data is\r\n                                    known as Intermediate operations\r\n                                    map(), filter(), sorted(), distinct() etc\r\n\r\n      - Terminal Operations  : The operations which are used at the end of stream pipeline is called Terminal Operations.\r\n                                forEach(), collect(), reduce(), count() etc\r\n\r\n      - Parallel Streams: The Stream API supports parallel execution of stream operations,\r\n                          allowing for efficient processing of large datasets across multiple threads.\r\n\r\n  # Parallel Stream in java\r\n   - Java parallel stream is one of the feature in java 8 which is used for utilizing multiple cores of processors\r\n   - Normally any java code has one stream of progressing, where it is executed sequentially. Whereas by\r\n     using parallel stream we can divide the code into multiple stream that are executed in parallel on separate\r\n     cores and the final result is the combination of the individual outcomes.\r\n   - The order of execution in parallel stream is not in our control.\r\n\r\n   -Parallel streams are introduce in java 8 as part a part of stream api\r\n    Parallel streams help in executing collections parallelly by utilising multi core processors and improving the performance\r\n    By default streams are sequential in nature and are made parallel by invoking the parallel() method on the existing\r\n    sequential stream or by invoking parallel() stream method from the scratch.\r\n    Parallel stream divide the data into multiple sub streams executes them in parallel using multiple threads from the fork join pool and combine the result\r\n    Parallel stream are helpful only when operations are independent of each other and can be executed parallelly\r\n\r\n\r\n\r\n  # Advantages of Stream API\r\n\r\n  - Stream API allow us complex data manipulation in concise and readable way.\r\n  - Stream API used lazy evaluation meaning only process elements when needed.\r\n\r\n\r\n  # Stream API and IO Stream are two different things\r\n  - IO stream it is sequence of data using which we can read and write data\r\n  - Stream of API is for processing the group of objects or collection of data\r\n\r\n\r\n\r\n# How to Create stream Object in java\r\n\r\n  There are total 5 ways to create Stream object in java\r\n\r\n  1) To create empty stream\r\n     Stream<Object> emptyStream = Stream.empty();\r\n\r\n  2)     2nd Method using array\r\n         String[] names = {\"Uttam\", \"Aniket\",\"Divya\"};\r\n         Stream<String> stream1 = Stream.of(names);\r\n         stream1.forEach(e->{\r\n             System.out.println(e);\r\n         });\r\n\r\n3)        3rd method using Builder pattern\r\n          Stream<Object> streamBuilder = Stream.builder().build();\r\n\r\n\r\n4)        4th Method using Arrays  (anonymous array)\r\n          IntStream stream = Arrays.stream(new int[]{2,4,65,3,5});\r\n          stream.forEach(e->{\r\n              System.out.print(e+\",\");\r\n          });\r\n\r\n\r\n5)        Using collection Object List/set/Map\r\n\r\n          List<Integer> list1 = new ArrayList<>();\r\n          list1.stream().forEach(e->{\r\n              System.out.println(e);\r\n          });\r\n\r\n\r\n# Methods in Stream API\r\n\r\n1) filter() method\r\n   -filter method takes predicate\r\n   -It is used to filter the data\r\n\r\n2) map() method\r\n  -map method is used to perform operation on each element\r\n  -map method is used for transforming the data\r\n  - Example: Square each element in list\r\n  - map() method will modify existing stream\r\n\r\n3) collect() method\r\n  - It collect the stream of elements\r\n\r\n4) forEach() method\r\n   - It is used to iterate over stream and takes consumer interface.\r\n\r\n5) sorted() method\r\n   -It will sort the stream\r\n\r\n6) min() method\r\n\r\n7) max() method\r\n\r\n8) mapToint()\r\n\r\n9) reduce()\r\n  -Many times we need to perform certain operations where stream of data get reduced to single resultant value\r\n   For example : Maximum, minimum, sum,product\r\n  -Reducing a data is repeated process of combining all elements.\r\n  -Reduce() method is used for aggregating the data.\r\n\r\n\r\n  # map() and reduce() example\r\n\r\n  -map() is used for transforming the data\r\n\r\n  -reduce() is used for aggregating the data.\r\n\r\n  ( combining elements of stream and produces a single value )\r\n\r\n  Stream: [1,2,3,4] Calculate the sum of numbers present in stream\r\n\r\n  Map() -> Transform Stream<Integer> to Stream of int\r\n\r\n  Reduce() -> combine stream of int and produce the sum result\r\n\r\n # reduce() method\r\n\r\n  reduce(T identity, BinaryOperator<T> accumulator);\r\n\r\n  identity is initial value of type T\r\n  accumulator is a function for combining two values\r\n\r\n  Integer sumResult = Stream.of(1,2,3,4).reduce(0,(a,b) -> a+b);\r\n\r\n  identity: 0 which is nothing initial value\r\n\r\n  accumulator : (a,b)-> a+b function\r\n\r\n* While using reduce() method with list of String we don't need to pass identity\r\n  instead we have to pass function expression\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# IntStream and Stream API in java\r\n\r\n           IntStream                                                                         Stream<Integer>\r\n\r\n    -IntStream is stream of primitive int values (Data types)                       - Stream<Integer> is stream of Integer objects (Wrapper class)\r\n    -IntStream has built-in concept of range() and sum(),average() etc              - To do sum operation here we have to use reduce() method\r\n    -IntStream is a specialized stream for working with primitive int values.       - Stream<Integer> is a stream of Integer objects (the wrapper class for the primitive int).\r\n    - It provides methods specifically designed for numerical operations\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Advanced for loop in java\r\n\r\n   The loop syntax:\r\n\r\n   In Java, the syntax for a Advanced for loop is\r\n\r\n   for (DataType variable : collection){\r\n\r\n       //Code Block\r\n\r\n   }\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Optional Class in Java 8\r\n\r\n - Optional is used to avoid nullPointerException\r\n - To handle null checks optional class is used\r\n - Optional can represent both value and null value also\r\n\r\n Usages :\r\n   - While creating  method which is called by another method(In case of return value)\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Design Pattern in java\r\n\r\n - Design pattern are the well proved solutions of commonly occurring problem in software design.\r\n - Design pattern is the way to handle commonly occurring problem while creating software.\r\n - Design pattern represent idea.\r\n -\r\n   Three main categories in design pattern is :\r\n\r\n   1) Creational Design pattern\r\n   2) Structural Design pattern\r\n   3) Behavioral Design pattern\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  # Singleton class in java\r\n\r\n  A singleton class in Java is a class that can have only one object at a time.\r\n  It is one of the five Creational Design patterns in Java which helps in effortless development of Java programs.\r\n\r\n  Here are the steps on how to create a singleton class in Java:\r\n\r\n  -Make the constructor private. This will prevent the class from being instantiated directly.\r\n\r\n  -Create a private static variable of the class type. This will store the single instance of the class.\r\n\r\n  -Create a public static method that returns the instance of the class.\r\n    This method will check if the\r\n    instance has already been created. If it has not, it will create it and store it in the private static variable.\r\n   -If it has already been created, it will simply return the existing instance.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n- Singleton basically only one, this means we can create only one instance of the class\r\n\r\n- Step 1 : We have to create a static instance of the class\r\n\r\n- Step 2 : Define private constructor\r\n\r\n- Step 3 : Create public static method which will return the instance of the class ex: public static getInstance(); method\r\n           method should have object of class\r\n\r\n1) First create a static instance\r\n2) Create a private constructor of class\r\n3) Create public static method which return the object of class\r\n\r\n\r\n# Types of Singleton class in java\r\n\r\n1) Eager Initialization                  : For simple scenarios where the instance is always needed.\r\n\r\n2) Thread-safe Lazy Initialization       : For multi-threaded environments where resource efficiency is important.\r\n\r\n3) Initialization-on-demand holder idiom : For a balance between simplicity and thread safety.\r\n\r\n4) Enum Singleton                        : For the most robust and concise implementation, especially in concurrent environments.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n # SOLID Principle\r\n\r\n  - SOLID principles revolutionize the world of Object oriented programming.\r\n    When this solid principles combine together it will generate more maintainable and understandable and flexible application.\r\n\r\n   # Advantages of SOLID principles\r\n\r\n   1) Easy to maintain\r\n   2) Easy to understand\r\n   3) It avoids duplicate code\r\n   4) It maintain structure\r\n   5) Flexible structure\r\n   6) Reduce complexity\r\n\r\n\r\n  S - Single Responsibility Principle\r\n  O - Open/Close Principle\r\n  L - Liskov Substitution Principle\r\n  I - Interface Segmented Principle\r\n  D - Dependency Inversion Principle.\r\n\r\n  S- Single Responsibility principle states that the class should have only one reason to change\r\n     or it has only one responsibility\r\n\r\n  O- Open/Closed Principle states that class should be open for extension but close for modification\r\n\r\n  L- Liskov substitution principal states that Objects in program should be replaceable with instances of its\r\n     subtypes/subclasses without altering the program\r\n\r\n  I- Interface Segregation principle : Segerate interfaces into sub classes instead of one concerate implementation\r\n\r\n  D- Dependency Inversion Principle :\r\n\r\n--------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Garbage Collector In Java\r\n\r\n  # Garbage collection in java is automatic process of managing memory, by removing unused objects.\r\n   -This overcome the task of manual memory management task\r\n\r\nWe have two types of memory space in java as  1) Heap Memory and 2) Stack memory\r\n\r\n- Heap memory will store actual object\r\n- Stack memory will store reference of object\r\n\r\n- Garbage collector does automatic memory management\r\n- Garbage collector is used to delete the unreferenced objects from the heap area\r\n- JVM control when to run garbage collector\r\n- System.gc() will run the garbage collector\r\n\r\n\r\n # Strong reference and weak reference and Soft reference in Stack memory\r\n\r\n#Example :\r\n WeakReference<Person> pobj = new WeakReference();\r\n\r\n 1) Strong reference :   Object never get deleted until strong reference is present\r\n\r\n 2) Weak reference   :   As soon as garbage collector get run this object will deleted\r\n\r\n 3) Soft reference   :   Depend up on gc , but only do if there is shortage of space\r\n\r\n\r\n- In heap area whenever the object reference is not present, heap will allow to fee up the memory using garbage collector\r\n\r\n\r\n\r\n-- Heap Memory in java\r\n\r\n- In Java,Heap memory is divided into different generations for efficient garbage collection\r\n\r\n  1) Young generation  (Minor Garbage collector)\r\n  2) Old generation    (Major Garbage Collector)\r\n\r\n  - The separation of memory into the young and old generation allows garbage collector to optimize its collection\r\n    strategies based on different lifetime of objects\r\n\r\n      Young Generation :\r\n    - Short-lived objects tend to be collected more frequently in the young generation area\r\n\r\n      Old Generation\r\n    - Long-lived objects are stored in old generation area.\r\n    - Objects that survive multiple garbage collections in the young generation are promoted to the old generation.\r\n\r\n  3) Meta Space   (Outside of heap)\r\n\r\n\r\n\r\n  1) Young generation is divided into 3 parts\r\n     i)  Eden\r\n     ii) Survivor Space (SO)\r\n     iii)Survivor Space 1 (S01)\r\n\r\n\r\n   When we create new object it will goes to Eden space of young generation\r\n\r\n   Example:  Object1, Object2, Object3, Object4, Object5.\r\n\r\n   Now, suppose after periodic time Garbage collector get invoked by JVM\r\n   and in Eden space Object1 and Object2 don't have reference\r\n\r\n   So, Object1 and Object2 are marked to be deleted by GC from the memory\r\n   and it will sweep this remaining/surviving objects survive memory space\r\n   and the age will added to survival objects and this is called young garbage collector\r\n\r\n\r\n   1) First time garbage collector runs\r\n\r\n   2) Second time garbage collector runs\r\n\r\n   3) Third time garbage collector runs\r\n\r\n\r\n   - After age limit object has to do promotion\r\n   - Promotion means moving object from young generation to old generation\r\n\r\n   # Meta Space (Permanent generation in old java and is part of Heap memory)\r\n   - Meta space is outside of Heap area\r\n   - Meta space will store class variables. class meta-data, constants\r\n\r\n\r\n   # Garbage Collector Algorithm\r\n   - Garbage collector uses Mark and sweep algorithm\r\n   - Garbage collector uses Mark and sweep with Compact\r\n          -This will compact object/survival objects in sequential manner\r\n\r\n   # Different version of Gc\r\n\r\n   1) Serial Gc : Only one thread is used so work will be slow and Gc will be expensive as all application will stop/pause\r\n                 -If Gc is slow then your application would become slow\r\n\r\n   2) Parallel Gc (Default GC) : It depend up on core so 2 core have 2 threads, 4 core have 4 thread and it is little bit faster\r\n                                 - Currently java 8 using parallel gc\r\n\r\n   3) Concurrent mark and sweep : While application thread are working concurrently Garbage collector threads are also working\r\n                                 - Application threads are not stopping because of Gc thread (Not garenty)\r\n\r\n   4) G1 Garbage Collector : It will garranty that application thread will not stop because of Gc\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Java Theory/Java Notes b/Java Theory/Java Notes
--- a/Java Theory/Java Notes	(revision 7666dc27f6e206e4e9b2d52f3391b893744e1464)
+++ b/Java Theory/Java Notes	(date 1748932778074)
@@ -103,7 +103,22 @@
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+Static methods:
+-  Static methods are associated with class itself, not with any specific object itself.
+-  They are invoked/called using class name followed by method name.
+   ClassName.methodName()
+-  They are called using without creating instance/object of the class.
+-   Access only static members:
+    They can only access static variables and other static methods of the class directly. They cannot directly access instance variables or instance methods.
 
+
+Instance Methods:
+-  Instance methods associated with specific instance/object of the class.
+-  Instance methods called/invoked using object reference followed by method name.
+   objectName.methodName()
+-  Instance methods can access both instance variables and static variables of the class.
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 # Different Types of Variables in Java
 
Index: Java Theory/Images/Abstract class and Interface in java.webp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Java Theory/Images/Abstract class and Interface in java.webp b/Java Theory/Images/Abstract class and Interface in java.webp
deleted file mode 100644
--- a/Java Theory/Images/Abstract class and Interface in java.webp	(revision 7666dc27f6e206e4e9b2d52f3391b893744e1464)
+++ /dev/null	(revision 7666dc27f6e206e4e9b2d52f3391b893744e1464)
@@ -1,319 +0,0 @@
-RIFF4�  WEBPVP8X
-      � � VP8 T�  ���*��>m4�G�#"!�4�؀
-�gn��4;~�煾�� n=�!�n�3=�~Ы/C��?������
-�o����&�;���������������_P����_������5���
-����g��S�U�잡?����x�s������������W����ٿ$��xK���_��'�_�?�m���G��ߏ���c�i�ߵ�����7�߮�q���G�������?�`�������?��b���e�3������~��i�G�_���������/������s��?�����Vz����_�_������W�_�?�?m��� �)�����۟����}��_�_��#�����g������������������������������������s���?���@���A�Y����������}�����s���/������'$�R؈�ɳ?jR�ӭ|C3��Zb���c�9/4xw';=9CAYp:�"��àU����,*����w0�aտ���da���B�8�Y<<���˂<6�ު��a?�f�$�X5�͹����mp��f�B�`_�N�W�v}�8�g_�ocH�o�c!���f4K�ᐪ��n���<�>n�O�r`Ar+t�ۥ�2�b����36���8����ay�.#:�d;z��`��_��.�V{O�O4���H��+�����`մ��ړo�(a�N@f�PV��m��[�9*�`ZC|U���;p=P�'5���D� �[fNg��*��!\٪]P�=�T��?c���+���92��
-��׋P�����oR��i���z�E�.��Nc�����7�IR	�������X��x
-}���x�-D���ϫ�P�
-Rf�x�j`TMC;1'
- �����Ps/�a4	��P��I�C@<�50*&����m�@��J,ڔ*�B�ڶ���r3��.ӹu�Of����y�b��rI ����'t�P��O:�ɏ� ��Nqp�(�g����I��ى{.�;n)�C?L�� ?�0�`�b��B��
-��y��D�2,���*��|hQنuʸńɁ��#����L�Ӄ�wC��R���O�y�9���<uL��g�{ ݃�MĆ��G�w�ܽ�⿽��WC34�K�9E�!R�>�B ��l����ܤ�c�0��r�Ĥ�}mԫzH@`۳GƇ�
-Bեzސ��b� ;{wD�b!KJDy�Z@���j!j�V`2���B��s�6�,�e��O8�'{����b�� W��u�}-U�W���O���N:��{�0���������fv>���k�<ѿz����ݝPɋ�\��#�:/��O�G�[
-�U4�hs7j'#�b젪�CV���y��>���KX�ȣ�!�j��4
-�����psy�r5(����=(��4|,��),��X�o��\����99p�3���X�<�s�ҫZ��v��ZJo��?n�V�5Tȍ�a6��|��N�!�_�������G��� �/�5;0^>��@Q�������pT���X�t��M� xx xt!9"Y^��̜K�L��-pSu����B�����-H����=0%
-H�ɚ��Ü�D��^%zs�heW��+|�:uʓKng�$ .��b̰o.�A�VP�툏B-F�̄�IZ$�ɸ�5fI� \���7�3B�Ŧ�>˾8Y�N��g3�s�c�*�bz7��@9��se�<�>$7�q�aT@Z5�z�>��t�U$B�N�_�2
-k�r
-Թ�,Vy����G��#�"ܘPI�vd�Yb�Г�S��2W:H�&7��j�H$(#�x�����K�伒?gG<��Ր��c�p�@�5��7W��޺�A$f�y�ōE�l��C�a��BJJ�n]H�����;eI�[A�v��hKS�`��E7�$`~���6�I��B]
-��+Ӑ���^Q�
-8 �˨�%	1a令��E�]�&,���{O��w�������=k�T�)�n�Aq ������S/�aų�ߴ�5��?�4���L��iU�^ͻ���D�&\��jZ��E$$Ch;NK P~���m$���t	د�(/�Q�Hs���[�y&�gXo���"�3��.�n�O�Ia����4X�R� ��
-�W���[i7�qX�W_���6V������DL�p�Gy;NRڥ�"��;�vE�t�l<�	s9����8�1�9�8��$%Q.뎻h�����P������|CB�y���%�wR�?�Xfd#N|gQ�]�`d�~�T�`$(S��,����~�]�@���׃��l�����ܚ-uƟ��$JD��+@Rm��h�c�=m҉�)6��Gݲ�I���,7*U������ ПW�����AH�u$S��81G�������^�$��{̛�qE�γo
-��� V����
-�����PF���6���:ϣ�j�H��F#>��A\��Ge ݽ��n�=D;���Xg���9�k�K���g�de��Rم��eE����l�3m�!E�x��sT!]6��L�1�#p<��8V��/�'�A{D��sl;�Fy@���O7�&�@�����LG#	�n;�*��&?���8�!	�W�C�G�/�Tc�t�{�Y�g
-CQ[���Q�E�H�b�F���_�?�~^�8-�=�MP����
-��B���H��g+xV1�)��G���G�Q��2�__�k�WG9� |�f"�:����>-灒����%�U�9�<�{�9��T�؃��,�r�0��i�'\5q`�{�7�/��/���2:���5�;x���A��5��QvV��oң�X�m���Β��-$��ib˨�:�ˊS�Kkr�l�>q���^�Nz����O��ps{�S��7�\�d�s:�����K2�2,(F@&-���?Zx�����7ip-�X�P���}_4�����8&�s�%r �7��B���9�\�8/FKR��z�2yAG�k��:��J)齤!�}L����Û��W�����<>@�&H���wg�Y����������,#�m�}~۝+�2�����;�Nםa9b��+�c}t�p��iO��i�'���������k��#��`r�oA�OOk֜i��)V(x�r�n����0��\��ʺ��rt.Vw�G/eWk�vB�V��}���J鷅� ���I�=�k�{�f�Vo���v��4_�$J_���jN?㤱y��5���VBx�x�S��5_f�gB|��+�>%nx����ߞ�����4�TŪ����v�i�Ԛ�  4�q�Z�c˧m��<-s�/�y��2��GmbBUGѭ1C�u�*����y�*�ĥH˞Bٗ��8���=�G䰳�Y��qq ��������U�����`�}�]3=��. �ݕ��E�G�Ax���JH2�htQ�l� ��h @�� �v� ��b�1\Lo�r!�poD�L�����|���v��tw6�5�~R�(��L�ƃ5�h,ǲ5Y��f�'�(���_�C�%�����>Y�Qf����_R��[��S���]
-�1�՘���M%�f��e��^�F�.���X�]�٘`�y{?��:mYhj�	�k|F+�k[R
-诙�g�r<l<��������zi�5GU_
-{�� Ty�
-��^��_rY%!���1
-]٘�;���9h�� 
-��7��w�+|P���y�~�@�٨�5��}(X,�w��IgG1�,���K��w������8@pC���̾2Բz�  2�!�ԈƝK���~�t���?������[�B�X�˵��~[��g~�ja����7�9Q�-�;T:���:T�$:ٷ�Y:j2����
-+���0�f^<����?*�/�lK wz��P���>�gv ���$``k�F!+���7��f��°Λ�D9�pKO
-܍�@��?���@ ��L���1Bgr)��O�Ix�=0Cŝ�ӷ�9~M/Rxy�F7[X�����/P�cA���;�If7<J|��7�mE�N"F�n�_�bnR^�Vر���P���Cl���s� �Z�_�5i�e�� Z�}&�)�|�PuOU�[�OxO�F@�s�]��S3�}=7���h������И'ڀ��";@�S���«��F0q�TS�j�I\�Qm
-Ј��.�m�W'�L�����Rc���\�)�\p���������>���?�0���I���ر�G��G���C�O���V$ �u��{�"���&���;B�%����n���^��b��##z�9Ê��^�\4^O5���Q���]f����"J���FU�[Z�ЍՃ ٙ�����!V=n�ER�'���oA��2=�R��Ur :�d�3
-�(� ��9�P6�{�w���="�H{r�zw	����/
-��I�u6��d�e�-m;��'����E�����&4��/�-:���#�=�3�^�C�
-u�/���-�"K���|c�-����8�}់�7FxL2z�߫��T�w�Ff��w�6�}�aZ5�Մ�Aj���]������-Dig^="ߦ@�BX�!�����G;cv<��)��`>�U.5����7N|#�^�1�A�k�C��(;��oA~�-�
-ΠK��m�	�G1}n��&	Nj�3����Ǔ���1�u�@���(�Q�-ԃ,;�]����F �~�W]����=�/'�0���Β��m�����e7m���rE;�����Hߙ�xb�)9I񥱬h1�6����+���y9���O��=��ͯK�q�~���eH��g����AU��r���z�
-X3����V~eM�%/��jT1c�/}�D?]B�o\�j���dՎB7I#dʂT�|ʓ�˫�D;ո�K���y�񷒈 �cRM�����J�6"�#t���T@��"/T��M�o
-u5R�N��8I���A��+
-&
-���i�Vmk���5՞o�0��pʅu�³�h�Ў*ׁ���33��j��h��4��S��4��"h��8�[5�E��58�$�̾��
-��~��ΐ���F�2-W)ס5�؞+�k�P}���G����yC.W�`���Vi��»i+(!!���8�6���+i��lۿ�l�\~�1�qDmon�6\Lr5!�f�-�4e�;��N�%d�G2_�?�Z��%��|o6���9xZ|�Am��K�sF��e0�9� b�dW��"��S��B�ߐB\�k��*��Aŕ4t�g��%Cf�i�.����d$�g�0T� r���
-����,�Y�5�h��%��ӊ�߇���5R�LCqV�p	?��.4�oA�!e��X��4'Iu"K|a�jO6!�#K8؍��q��s���>s���42J��A��_/]ؤ�U�6�2�����9g�\�1��[
-�+g`�4'����8_/�}�G�Qq�⹓�2��^�i�g�xX�G~��5�Ͱlc�]"Q>7�x�J�R��E\��g��2w+�몵͉i��K��[�_�qK�V穠��C:?;��y�$�fI"�Qf�:b�"%Ǟ/�F�~�Ī�JO,~��l(�3���2���t��N�Q�p��2��A����OU}%L$n`j���W*�=2��'%��>��I~ܢ��W��4��{x	O�u? 	슖q�1 h��v�	�%�y�+`�	�X�s:N����ȸ\{��s����� ���˙�Z��w�!6���y�oG��
-����K�V�\�����ĩ09z��q�&�RfFp�G��8{K�
-af�y����Z���]�R��m@��BT̯*�M�ھ�o@ۆ�ã� o!��b 8sf��.���b�UzY�� �4�IQ��ww��
-ÿ��q͓O(~��>#�8���lI@�o4�CH��~K��?n���~��R�i��W�ե;�vT�4)�߾$s-��Ac�����Pr�~i{��a�';s��w$u�*���i�׆�P)m�F�49P�k�;�BrO��u��h�0�	��� W���\���.��M܏�a���b�v��AT2��'e\��e޿-҆�_��#1������R&�;��T�K�gڶl����C^{��zb�%�f�ٖw��
-�� �N�}ޑ��Un�j ��=K1���"��~����b�Eݳ���҃��<O��?�"�^�G2]؛N� ���2�K�Ը�Μ0`���j4&����Ax���{�4��5l����T;��u��1��F�Z�`v&/lm�N��vC�1p���G���޵l87�7Ċ�����Ҹ��DMr�#���[��^�-����w§��\�p�J�9���ީS|�_�&���	���^pZCI�p� mLA�+YF�$���(v�̬�x
-r��ʉ��d(�~c��4xe!Ҵm��R�`��Ù�^v��X�a�-�EO7Z�RW�^E:��I` �Q�m$�c;��{�=���ߏ�>�ֹ�*� ����͟�T�a��4�S<���z]� U7�3G4?ќsY��پ�����P�r&z��9�]i��<[�CL4[\7������fTZ���`�Ф	��X4X��-ٞ^	��@�{��NW�T�ҳ�p�!�=+������(���w�97NH����D�OE�C���6���"�"'h��/)R������8BP�+~����e"H�a��t��4���M*J%Tr�~��s����<3���Xp4^Q{c�<C�^���V�(�)h;_��v4�i(n"y�81��%���y�wؔ>���\�i�؈�a�."��[����#a��0��j ��gSC�i��-ztO��[^��q_�I��_�(�[V���}S���e��#%�\��Y�_�;�)���y�-@�1�B��U}�[�7u��}�&PUeGQ���1ֳ�<|Dp4�n>��@�nL�t�R�(�e���K�����Pp�
-�1I�ܽ�$������:fxfGF�N� ;Α��,�j���r�Oy�Xԓ�&2�	�'��J��B��4��uM�Fnr}>J�}�A�:�4�)����m��j�]��{p���e����F�:L5���7>��!B�N�L�In�ܣt(75���͜��
-XS��g���.�����v[���[���P!�	b�(Y��M�0U{���ǋ�[_Z�3�&1g1 2���n�yܨV�mdp�ḇޔ�ij���6L=1�������d
->8��)��r]���}{Ag�W`��h��]�h)�d�,�r�F� �I�q������|]K�j��P"��x�+��2�}���o��׎���b��X2oJܣ�N��AΠ�xZIL*��_�
-e1�Nx�j��n�uK�9t~�l���$�b���E/!����PG)q�Qi
-�G�*���.�.�ybc���m�t����ԃ�m(Eh���k*x$��{�6�l5�vM������u[�������U*l�N���_�#���#������6��E</��� 0A���#�ǚ�X��N�O���/W������R� B����;2SU�á|�D�(�i'.5�H�l�x����� �ª^�Q�ʟ ������/��D���9}��H��HPv�
-	��|���q����Y�����<#�굎��������I����A�������p�]x=�j���$+�:U�g�K��r8F?���O���N�XPy�-?k u��2aX�T�����7�ݔv]�n�V�c�wfFb�v~=���ez[��t�E�U��MA�O��Ij�T|�z:�M�6�$5���`>�_��ei�J+W�5
-�N 'ʥ��P���?3!�}�8Fp�n"Ѽ>��H}J���\�;�����.J�����ǁL\�̽���s���|D���j��6ťxL�~�:��R�?qjҬ �w:�g�A�	�k"�J2���욃 IZwD�\�;��U˛����`H)��H\�7ΐ�,l�Ā���+(E1d���7-�*|����LC1=0IQ5F��o�z��$��f 4��M�J�F�>[����b���T��,5�d�:A�7��F&���#u�/��5���l;ܐ��Bv�9��g�lJ���ޥ4��#�8�����ʔ��D$�;�����"qM7�룠�ѓ�s,U��[���v>�=���<K����]i1�/9s�+wi�V(ӆ����4*3++���ߜ��ֲ5G[�Z�dKU��\y���5P���բ)~�5l"
-�	co���"�[�Aҥ��`��s���#�kDP�3S:o�	<k�	��Z��^յ;8�8��l�Z
-G�Gw30n.
-��1��iey*
-\��@I�Z���$���}ɮN�Fqv����>'���Z4�*�'v�O��ApY5���
-b�J0�����/��۠��T�P���%N[��
-<��X�
-�Y��JC�"[�Lq����1�=���ư����)�5s�G{
-i�ө���Ύ�':;^���2��u4�
-�E.1�E8Ύz)�����σ�ǂ��!����m���ʳ���J�|�է'P4����6�T��c�簖E�T{�E�'Rd/V�A��:
-m��������U�;�
-�69��M��<�C)�jɨ{��Q3��U_I�/�xt7>~�@� B�fDI��Q�����g���3`�p�AQd��uD��I���F��P]!�jm�֚�fR*���KXEk����f�����Vs#l�i>�p��4�Lb�@\Y�Z6�T���b�~Z,Zk��	%[y��q^�*�Iz�*MŢ.�]'O�MrWꋣ>�z|-���0VDN`l�7��<���XW�uc�KՃ�-u����p�,�	뭳�٦=����������k !�s݂���3�O�M=�.N�Cvc�L�4�Ղ�;@4|-�=�pd��*��Ql2"m9�wzx�7K�@(Uԙ҉��Wo��t��/U	�t`]q^�N�2"u��U��{��>����t:2�| .{�z��8@H��������%|/���\k���(}���$����	E$��xbR�J ����,� D�  ���0��b���3�q���lL~�R>�@>�Vzt����'py��6%9<x'�����u������A�\� w}z"�8,5I9�0���17{�`����|�z�?<Y�d��ZRM�6���$H0G��Rn ��_�Pˮ�Ft �}��~������I�t/�	��5pT)R�[�H���GQ�A�pK ZcJp"w�&W�O���ڤn�@��6�c*�b5T
-*�1��zZ�w�:|ϖ�9~]�h|�2ΤA�����W-.�h�F��#��i(AX�\mlb`ü��/D���/_�7ZLD�.ذX���s}��д�f�0�#D��fŰ��s�;Y ?w�3}���S�-�����`�܍=���y]��:~(&�m��y%qQ�_"�S�mޜ�ڣZK3���_V׳y�,j|.T 	�N��g�
-�l�Z�0�p���i�ئ�\G����}b㬴�YЕɹ/=�W����6L}dO�U��tĻ��֣�{�(���TUĸK
- h*ʜ�v���Q�J\k�g��B���Y����%��?o
-���LK�LT�����/� �ke�d��c��]�6X�I7F�� �1�-b/����ח5�HN�5(޶y�cKH�hH�(�/�mx�W�X�EªA~��xSO/.�mŸ� �Y�#�@3ȓ\ �P�������`R):;�(_�Pѓ�R#8���2�` �^�
-W�GH�`����9!l��$s�M�T�Pr:��HLsב�:��Z3�-�O'�]D�t�K������YI���-�ÿ�qO|���:��n�x�w"�1$�/Z�2>��g�� F��K�T}5�[������w����|�ڎd�`�Ʉ��~���lά�>cp�����yoK��MI�o�y˳��ۍÔ�o΍5�����*��3X
-�3�Y:�c��'�|%�)`����jG�y� ��t�kѬ����|�wC�����d@��(7�o�"��&�i� .Z�C�6���l ~ �
-;�3��'^My��˫i�����݃U���R�{yx�Xc�\�1+�|���ʞaÀ�STR���&���΢����Z����FV�I�%��% X��^%pR���G(Bj �̉&ٝ�$�r��W���gK�S�Wr=ǫ+G��!��+���ݎ{�P�B ���[�g���N�J-@�t�^^3۷d��mJr��W�ſ��74
-�,�'��(��}�7|o@nO?~v~�`��H���<�4 
-�65��p,G�.�#����?��硎3�Qۺ9������0�)�e<�.����BU�Đ{���BN�<	uMGB>�k�!	�tAot�z�����IWx�%���a��R-� ��]���+�b���[��@�����R�`6�
-�[�{�km�*��T�g���
-P?�������Lh�dм�×H.��Id�G ��g�R�-�wYU7 s;�<,��e=:]�b�z0�e���0��
-��/�ÙRP���e�I�k5|v�I�8/*$fiE���\%�7r-ڐ/?҇��5�����#ʺ�����/��A5L݀6{/x�=~b�� T�����
-,� N¸��ιܥ�s(��~!-E��Zt[�VEZfJ���iA���5�����=��)u����<E\��M�͜�C��x#
-K��~�l���� ��7ӼQ?!rGe�\��H+'[C7�����
-7l��J�`A���ȯ�׍��}i�e�i�����*�ힴm���Uͣ��_�H',���H�����o�l�ݲ[)Ȏ� hh)���b=q/U�!cZ��c�Řq���z
-�b����� dN��Oz����O�f��@��G�J�W��Az�@�*�X �@�f:ßU�������P�Ԇ=�T��)���:X�� ����d[��o�Xj�>n��j�b��&::67�ӹ����p��iFtۅ��
-�>�����%�����<y�I?��F�L���(�����+>�R`6W]'.PA ��0�ݨ������D�Nm(�J��ݚt0������M��J_�4�'���=����.�\�pP	<��<���e}��}x�<���:r������t����r�����`�b�h�b1�l�$
-U�>pAȂ���X�B G��U�cm�������2�Y��0�]HC��#�O^���tm�?>�>i<�5�]	~rz#p��_�)��ܳ�=��F^��v��CU�#����6�AZ��;�N]p_���y�ܩt0#��K�KJA3��	��4�_p�+�>t�zH�}4���c��_H�����_�b�I�".�'"�|���,������|�ŀ�79~rl0�I�{��/{�4x��tg�R^t��y�|L
-Ļs��C�Ǡz�?8����
-4ƅG�h4��Ľ��0~J��B|�D���扏s��D�!g��X`i&����P��^0�V�0α��� �4�/�>�Q ���"���ƙ''8�)�������B�J�E�jh}�%�~�>��כ��x����ؒ;� �qc�9��3$؀L���z��g���/4�k�/�ƨ�Q� <�����QL��O)d~�0���92y&��eT��H�U&�2٫�������J��9�:�Κ3�!��,��I
-��T(��J�
-�����M'\T��߭���H����gc)���?{6Rt�=�fPy6t��!��n<�E�4�U��[��ffd*=�VIh�d�ᮎ����Ċ�$��aG�V�'F��/�3'�<0/Զ��HS��ԌҴ���'3��
-4��t?��OٿDЦ�R�4X �:��8�e�S�*�}�_>��X-^��H�ؓ=�xM�8���F��z���#��m濒�h�L�=���2���p�y�gON��+��F��+��%��L�NNL�9n&��{� ċ!�����r|"О�t&����I}�)�t�knr��%���4���X�:g�m�jYă�(�XA
-˔bm�U����6�A4$4����
-OP�HW�u�G�)�7�v�!��4�SƓov���!�a����9����b)��x0�QDKa�أ5TG�?��B3e��'��y�]��cA�U���P�a�Cc�x�:�7H8�I��L��ѣۧ�ȓ����'��w�P\KS$G&�HTCI'Φ�պ��4����~�ZǠ�&G$�6��^'��Ɇ�9�b� g�1��c���mh�v�j|���O'A 
-d���~{�I�Ά2�U��JC��l;	S�8?$��hb.	��޾U���<�KA��;���у��
-����n���w��G�i�q�����עG݉�-�W�]@z�aAEI��O��[�O8�[)��c����ySm��#���ݝ{��6�5�yU�ߪZ����Uq��_��ɿ��2?��C��	 �j#(55�A-��b�[w��1�·�G�+�cgR�b���������p��g���M�p	C~��-2�=��`Q�
-�����\�m�#���}��v��,uE��%1��oӧ.�d�y��>�un���9;���ר�7�uIRb�l:��UEVk3�(b����n�FS�!b�Vfzg�ݴ�o��ե[q�L�I<���R�,Jy�{�ÓZ7���u{��Ӯ �s�O���}�F����X�dwˡP�vv��u��_`W�͜�  ��v��@�Y���πst3�� A���V�����粓D����KD�����쒵Y��Tp8z5��tC��Qd�5�9�(2A��*�(gI|�@���Հ��S���?�YV��p،N}Z���]� !]�	�p�䬁���û��t� ��)#��.��e�zLd�3�n�[��1ɣ��M��^[	<�U��X�Q�(��ò��
-g/�g�ܺl���9� ��2D}��F��L.��ň�����I?dU�3�`Q"H�`�3PnF�W%*D�@�Ym[�}v@�w��s�����ȱo�B��
-~)#���2����6}�4ܶ�]����:���������W��>����^��s?!.~�c+I�B�5��	t�ڶ`2�����Z��� �q�?fo���k����)e�}q	7G��jv�؞�Z��e ���gn��P�t!�L���J%�O����R��=��i��iƙ0�vJ��_�����Ll%�����G(V [x��\O�n�C�8VFW����	
-~�!��l�^*�y��8��,8y�}�ר!����Q�~&F���kI��7��å:�T]V~3|������v�&־M	cܫ����'�TJ��͟$����l�^���.]�ͷ��wBm�M]�c���f)2{�ų��4�S}���ӽ�Bf��Y��@��y�g��"i�� 6&	�P{ {��N7�KU:��&Y=D��fO�k���:�J!p�gVb�0��2�z3�q'��`��dRw�s�	��"�UgF���)n����Ng�s�k��T�뺂d�Ȓ��"�ξ�.z�O�%?�?~N�(dmx��[)8��jU�a��<}�%��ށ^Ck�A�Sb-��]c�;"�a��BZ ,{�?�O�j�Ь��J#I}�/���F�~�$��n�lj:^�����U�C�w38��X���\�-��7.y�Os��|1���.�q�,�б&1�V�
-~q�Z�|OúC�[�M��4�	]����RW�f3��xL �U��~WL�"�AY�bG�NE`ge��� ��o@   c��.��P�� ��ZD�M���&�-2��h ��n�}	t�G��zv]52y���U|:�<꤮e���:����3��P�1N��	�q��`�?���/�x�o �
-�����?��ܦ��ъ{�C� ���kՖ��j�]�~P�\�U�StBx��M��7� �M0~��I��
-L���Ӻ[������K��L)�x��E����4S�2��,A�s\�C�&�`���������x����L��f��_�>{	�܃'w,[W�91)�� +j�^=W̗�?H`��4ٯ
-�)�[3٤�6lOA�s9�%?~s'!�Ɍ%;r�-q���%��p?C����lS���{���鉦J��y"q�pF!�}��d�X����wb����)=��U
-�~ΜK_j̠�+%���&A��E7�v�cH���2�\��G�r������ҕ��wbt�|Dj_V������Z���R�alb:�c�����=r����P�񾠴&8���
-t�шG�����j"�z��
-5y��n
-�S�܏��4s[~�/�n���!��}fCd�)�fP�����Ȩ����#y�T/�*$�كr��OC;a��K���m\�;�+����o��X��&-p���0��o^yHF)GR��o�칭i� $h�� �$��.�R�g���
-A�������5��k�� ʟ�V��� �$w+��Q�S��kc�}��,�ə4��h,�0,���	��"�U]��f�(݄{%�#��G���Hx�:����jp�� ����)���g6}`� �ڸ�Z�R?�1D����o�F5YH	B�ږN4:n.uW~]�l��C���ya��?�P��F�t�&��g��t��00>��f�e/#�;��,�CƸ��<�[Pd} ����3?!�9	�z,#����.�m]5P��ڢ�� �Jy҆�R?�H2We��*OW[}h���?7�g�Ϛ�0�n�G7�
-b�I���d�3ΥǪz�Ǥe�,q�Ew
-Y«x�S�4�N�L'��3S�9���1g��uL���.��O
-��>t�oj�t���wv"҇QGl+�w��y*O�1?��{�����Wl$�q��uf]�����0�Mg����1��E���;� L�P�E��0�g�2R��yj�s9���/�}U�f��<[| (4�ӭ�-������^��qH��K�T����& �h����H�\e�~`�����N-�@}�*4_���� �&��[��@�Y�ڬ�BO�-YkZ��q�6>$�*\�L�WU����Wv��>k^�lk0��Cf\��m Bc�`���ze��Ցx��ѫۯ�cj����@�-
-6趬!�G3��1W~�vz�d��s%�!�l)�Hd0��Uh����!@"�0�	h��3����~�j����(�vv�d=)5�Ժ�T���~��E:�ؽ�#��_]%a�Q�g��k��j^)m=���w�(�Z�U	���Ja�u}s�(M��u��9
-�)\�~͈�!��vґ&@�
-X����w�k4��!y
-��q6�TP��o<�:�v�7H�)ϝ�1x��i�/�VKf���=!��� �x�4�k�z�wj��"�P�6,�9���S�x��}�z�q�R`)�#���@�n~�Iܙ"��L�o�]�/�������Ӎ������i���X#ZO�����
-��E_�	k汽�[��p�z���ԉ9Gø
-�d�1#����@Gi�bH��&SCOG.�o����4�+��n^��J.��b���W�[a\���z�9W%p���ݘ`"��{��K��4��\��!�g:� �[;K`�3��=���m��P������ңE�
-�6M}H���ژ8l|)ȳ;	
-�#�ex���WN��1��ɉ��vmS�yڂ�7�tR`��C2P�Y
-� ǀGs'�,�{�햘�o����«���"�Uir�3]��H��,��5L�>�BM���M�K�i�Bf���.�met��M��`�R�Rh�ƦZy����Z���C(b��6����V��f�fV|5�����4��z��J~��DV=���.(�*W����^mC�s�s�r'A����x{(��5)��r
-e5x����m�k��|'�j|B!D823��J��=���60 ~����ֈ�����������}������q;8H<^��D�+��D���� �7�..��Z����K��,�rJ�^7ŋ���pZ��.`�u���\�m�YF x^��u2kx��A����Bk��uE��L�ٲ\����1փu*��P���/)�3����?u�뻣.z�|j�����ˑ�x��|.��OO�4)ƌЉg�Q(��XE˜�4λlp��|�%��Ѭ�D��|��t�d�r����g(�ph�+v*I�D.��S�G(��Ӓ�Mk1�	�\
-�]ߴ��!�枑�vˏo����E�F\|alWz���>�7Qw-3(?��1ӡ�VϤ���ר@��
-�f�X掉��ŌR{��B�y��vD��_�'Z�#P�����muؾ����J���y{z�{ܠ(8�h\>���yh]^��bЂ���?�����M�y).�oͳ(W�������^�Ԓ^<�zq`n�:����R��e�rQ���:A�*�� �0l��*_2S`�MlZp
-�a2�x�8�ι�ɵ��@R�.d�������T�y��*т3lT&�^��
-�O-�d��y`�1"�����×��l
-n��)Tu@#����uo�_ݏb�� 3i�˲�ńr�$ՑdZ�>�Mtx�m9mA���s���>�����>�G�W��>�:��HTፀ<y0 �Q�{Bw����Q�t��D|���2���^e�o
-
-��n�ib HҊ����-���y[~�r\�kLn��h5� �S�A�x�E��T�?h�M#���:Z$SR;E$���99YH��/�v��������g���3X�|NC7,����Xl<��m�PQN�� ~��kY;��?�%x�3�*�M������<{���c�	D�� ��V0�0�]��wnE�|���<`�^��Fƪ�<'�|!f-.ƫ}%D���L}Ď��4�S�0�*]��L��
-(*�c�I��6V��0�P��W>>�-Y������s���w�̳�Y3����\���2�*C�n��@P�.����f��N���&RKw"sB}���ƒ(����u����Ql�z.�^���(��ÃW��jsX0���g���s�����
-����V?��B�'"YK�  �Z��P�`�(O��f
-\ 3���GOT[?g	��b��
-�QTK\D\���������f��A�p�HAp������K���̬�K�Wv���40a4�x�OO�UN��L�X��xA��:��u1B����Y������H�`.�-�����|Z�(`}���,� �v�Y�D��v�b%7#�6d��^t� ���x�Dn:��~n���c��5�kн�A�/���<9-gq5_��%�����`D���z�SZ�՝�2��k)�	d�
-G�����9(M~EF��m)'�&l+ut�d7�����Җ�2�Ȉ������{J�d�IW^Ȁ.I���9��͏��EZp� ����9�o �7��F�֚����X�A��g'�I�Mn���&36d3�tGT��!V���CF/�: Ν�'#�Z�N�M�9'��ll�����в�tq���a���o{�z��R��[
-�` ��ڞ��R���-�c����G�����r����#K��fy��l52U����E^�Y��o���]8̈́��w�\0Cxk��#�ғL��
-y��h�ǩ5V�~y�J;�J���>!�xD�Å�ijˈ��)ztlm�##��z`{�A<��c���g0��9[�X,i;sfl��F���d��^:��}� ������5B�~/&_.ڷoB��@�,�ͺ|@��@�F��0,�����?��@Z�̄ѡi�!H3���-��U۟�X���
-�]���L��R}�_I��/�5ݣ&�{¹</-�O2O�RL51���YӚ��Hܼ�Ĉ>�B�6�@5����|C $��63M�k�����	v5���4���o��_�	�VFZ�Q�!����砒�'�;���m9.25���2絘}Ig5�{,�t�^���]Q�,�nDo�d�&mz���9f����yJ ��~.��Y4����By�~T�?Q8�%����j�7��^�6?�>V�
-u�1e�f~���9^�W��d�������Cgr�"�CB�Y�v�$H��ܳ�[���ޖS��v�mfֻJ�
-��+�2����\0��L<�;���duꖑ��`��KWB�*)l�Ɵ�}�L�Z;?�K�M���F8�=.�66sh�K����g>@���;	��z迬������|d���L/��v�'���(Q!� iL$��mu��۩6��AW�z��V��.���+рG���܊v����&�n�><�+����Y�n����H{�EG̈T�@�m,܁م��jD���V;NT
-�Cu��/#׷ɤ�����<u[�)&����:���!���?��˙�@�����u��ŏ��G#��G�й�R�F۔����#z��H�ӕ��ަ��cR�N,�KM�|���˚�ܪnEa�4s0(=j|L�#7��#3�Z$V	r�������el��Ǟ6/���B�mfp$��i������MC`�%nr����*�@�a�� ����=i�� �%�R�s^��}�#�?M������מ�[�)SZk�l2v��Ӡ
-h�C}�}�tm����+����x�O���
-#fv�Z0����>CsU�͚w�||�a��ɚ�T p����t���乄&�ϵ���8k���u2���c1���v�k��Q'�`�� ��c�%�|���A;�~h'�V���n�B_ �s@��%t�e?�A��n7���8pVFTԑ��L� �<4�|K$oDi�v
-�$��J 0D��X�T��Sp]l^Ƭ�I�Q����f,��`V9o��������& O#8 c�֌��Fwo�?n����=[%̸"�� ��j>���'qس7b'C��Lz08F	Qau����+�զ��7�`�94}���=�L�2Ps<������H@�_���GJ9���k{���HS
-+�g�m���8���<����S�\'P��c�2<���9���@��^u��{�?�û���M���Wl��V:�ѷ�x�x��E!&i1h�Iܗ 2�����R�
-p�S�������7�cqr�C�j����f��B���MX�ٽ��J犽��bF1,���l����ȫ��c�l>�Y�L�g��O�P��$+*��]�YQ[������ZP�"@3f�[�2RѬ��c��ˈ�M���&�_�F4� <]nOm;=��4�kܭ��g&=.�ڐ�s����N|~��
-�F��ÔÅ���+`J�(�)��
-����xbxR�&��'K���f����X%$j��c�5��a�[J�*���"|ҊqE�V-��3��X��B+���FMQ�a	`���\��oܜ#�^�d��RX��74���Ի����Im��@lM}/���(
-�ͣ�́E��Z�&�x����R�#{;-	p�	7�UE.���an����ʞ��X���,*K�p.DJ�?S��3��4��ZRq�D���-��(�5�z�F�Dvg	m1�b��oC����<�^r�L���b�YL�E��t%�?U����ye�/�0
-��)�Ew��	�\m��)=�q��wA����v�J���u\I����}��{:���
-u�X�ȯ��ǚ�^�m�"x���Q}���~���������ٟ��6�Ϣ���(�}�Æl?���k��P|�m�MB{^��!˨��&�Ӂ80ႂ��Do����-D���ʘ��ݼ����s�`�Y��iW�#vE"b�Vn]���oTxi�	��P[R�
-���o��R���G��"|�ڊ���fTh��B�z�т'��n��.���pvs��� Z��e��*�D�<��Ο��1l)���0H���A��K ��2��+#7�:�	ĸ$}6�8�o.%α=����Ծ{p醤iq�� ��BqJ�9�|fb�.k���q5N���dY#-��������I��3vb|m��hC3���1�Һ�=Ig�����:�m����GNu ����^�	,BT
-;억
-���c,ԋi�� �#�0��
-;NL@���F&5����o R\�@8X�1�C�R*�%���Wt}?��S����Idӛ];��Z��%�`G1{��{�kӸ�0�~��Б21_\��H)E�v�ࡒ�
-��Wl�e�xd�~1� eg`�_��
-*��LT!{��������scx�H�_6� �ѓ�I�����8E�5R
-5e37�reL��߅u�m���Ț�o1���&�@�+F#qs@-��A����7�-�e�	Y#�HpM�D��3�J�
-l���ҕ"�1݅`��B��� ��w�k� ��z?��eT
-p��~MP��Y�	u!�0G�<[LK�,����g30��,n��$ �GlFX��� ��Zq��4�`A���+(��Ю�l��2�U01�^�ݡ�C��*-Rp-�_L/j<?��6MXQ�(�z>���0GZ�6�eVfϒ¾��L���@y�|��9��VQ)�i��t���f��kw̍��1�;9�������W�;@���7�Q�R�R$��u)Fٚ�Q�꺮�z�2s�#@�e|mD��
-���ɫ7O���<J�TP�����$��B��β������>��vO��a+��U��{�zZ��%W~�L�
->�	kra�t.�9,5����k���oݾ��Kh����#-3���/��=�$��[����E,�&K�Adh]T�s
-����H�:P��x��dy$vd�W{��������7��m�S�����R�Tݲ2Ѥ�<���k��rJ{8��e���`o���t��a�
-���H���d�ؓ�q�c͐���!f�äŶҧ����!5�H��,�p{����� �u7�M�=`��m��=$��9+�y������zJ���%c�l��R�z�ݑ�&F��d9��$6���(e 14۶���ؓz��)����3,#�cHx�}"zC��eP���X�3vE���<����'��r]a�<�o,�F���{u��OL༦���YO��U���v�8�k�B�����!q�f�m���haP��\s)y�������>$��9qA�� /�3k�>�����RX{u�!�3w�#���w���)���Ϸ=A��p+��?�� 4��� �:%K˚L�����P�FE*��'%����~.=4��4	��[���wa~�B2]���Ē4:
-�S�+��G�Q�8-0!�G���t�
-���$	ɞ:�2�h�'�;M��$B$��v��δ*�7gRw5��+z4G���`$��6��V.e�?���5����"4��N�om��~�ۼ~ƿ`�ML+��<��p��֝�D!�d1�@:l���r+בre{��_��5���[��� Jm�M���^E���뿰�T����T̥;��k�A��a�u,��s�d>���}�����׋��ý(@"��`������O=�G>`f,�&�JجH�� �$]��t4�*={�b��G���?�^r���n>�А�k>W~����>ϝ���,��y���D)��#�E�W�H����l�B��g;G���g+�π�߽ ����
-~��� T~���\�*���x8;P�r�
-�z����i@j�v.ֽLMeX��[���+6�3j��9�%@�qQg� �>�f�S&�����v�FI�MY��ӎI�z�%���.Ki'I)���4ES��y?Z�w�^����iM��ou����5�n����{�3}LK�Y��i������&YDO�K��3N�)6�s�|V��n�4wJ�滤�m�?\$�u4�^��3^5
-7����t��u�	�(ty��E�h�����ďn�S��
-`)���-� ��b1���;�Qn7�7��j�n�S�4�V���`�"b��P��C���|[.��|w�J^�
-��KS:W�_��ٓ�����1���{�|��eߺ����LN�rpT[nF���~�(a^�b6WE��۔��������e���ek�`�6��F�lr}:UM�U� ��w���O�I.�Y���П8;LX�:�IF���T@��\��ي���C��J���� �њF�w3�`���\�O���
-�͡Yҙe����\�� ��e�\c��_�-�Ou
-!zr��{۞��MU��$t�d[��D >7QB���Ʒ���W:W�@EB���v�����\C����znx��1
-��%'�lݯ���fTw�[i��P���~`��E�z&�N=$.��G��}����4
-/~z	�Y)�>��Im�e�a�9���u�s ~�v������,N��J?	��tK����v���3��xP�
-�����h��R~s#�����x^Ц�諪-¯����D����Ǉ��+5M��8�<�s=�ٜ]���a� �[�b)"H�M6�Qc�Yj�c�'X#}m�c��p�^��}/�����ODV0��A�ζ9
-��.]���ijA���%�r��h#�a]�֞�N��FO�{]���-�0�3����+�Z"�&_#��2KP0�H#����n���.�:Y��( c�`�dY�b"��8�R
-����_�Bl��V
-������<���Wf�N��� �8�8����J@�%E�i�~���k<F�x!{�5�bZ��N��	>���ܪ���$�����2-�7xА;Wp�ۀ<j��f�o���̤=��]��Fjc	�z�)��Z �4ŐhN����+Ȋ���^�v}�l ���Us��7��#��o�r��C�p   ��"H�}W5�h(��^C��E���?���V��.�7/�ta$����pҖvjPᔮ�'I���zύ��*�Cr�D6��9N�l`PA�� 7@Z0�#�U#�l?B�t�lU�,yq�KH�>w����
-G��u #�z۪pDԡ�?v�$1|�v��]I٬ꑭ�R0X1�c���y|�E�"*�F ���)�||�SiW��	�)Y�=L\ϱ�OP���iכ"��w^���oЄ7�*Ԣ�����b��t��|9�9B�)eI9
-d �+ݞ~߃?aOq��h"샛�N6���M^)Sh��̤��lZ��R~��d��K���KQ�N�����d�3ڋ�;	
-�;4咂�g�Z\�]xp Q���M!�$��n��?<\ڌI�<ޒJ�?�;ɢI�V�Ԇ������+5Nr&�  ��rVlf1߲k�$�^��x�]�7k,�'\�w� ���q>&����×�����F̜�}�ZqZ#^�����5#�6��q���WT�5%]�-Bj\��P�=�5��O! ��Ji�� W
-� Ѓ�8�|6�X�F̄�ٯݎՓ]l��K�c�M��d"T>�a:Z|��h i��s$ؑ�����u��#��J-!
-�d!�a���u��nTD��
-�Br5F��X���6��Lb���s�U6�������N��M��Ws����O��v2	8y;
-���hy�Y.Лs&ס/}Q�{�k��6���͏f,̥YM���VD��Щ��m&��hS����9� պQ][�u
-��XR�	V
-u�0� H P_ ag��.6�&�K'���`h۠�����t:���ӳ�6�-�Iҭ	���@<�I�F�2A�}��7�Ú_݅��
-D��F��~dƯ!���m����]��׮�ǋJZ�����-��6tT�+����� �*�؝y8�>�^Z�
-W�/|U��z���s�mpU:<�?-W�j[��X�:�^��8���"�"�/N�s�`o�۟�\�@aGn��<:��d�]19
-���� �U�C�M�}��#��+bp�-]~fmʷ�LGL�a��o<q4i
-Ŵ1��e�]冃��$���-�8Kۏ9�7 �|:��������m8J�Z�ymQoɘq�z[��+���i���ӹ�@����]�ת��⪎oWs����T�|�Z}_����3�߱Q~����'`ȬF�a�	����^8�*n�{�v��@)˸�#��hˊ�<��Z_P*��rѾ.p�b� q�o������}��g�o�#�ߩy��a�ڷF8�1��18���(�!���EA���`3b����3T�݅_#Z���K�y�*��� 3�57���dI��\��{a��o1R,��=͂�PH�C�x�\Z�U=�:�UEF��N�[���5�3�W�/��`�n�o`�4ӵ{Fe�@�!��H"B��h��<���_)Uދ2�� �kҳ\o��0+��/��8�jt2a�R�jW.�?ӎ[�M�O����p�6���jA���h�3���.E�oV8�4h.��Si\�_�i���Q�: b���9�Z�/�/�l{�vd�р�����f[�+���D��@C�=�--!�
-JP����I�0+?U���b���m��f=$�.�T���ͬj{�e; 3�ۄ��1�qc�墊y�b(�-�tqH�KE��i���]6��
-�O�0�-y޺�;JP,	�W�5��CR2��Ŝ&U� ���.w��@� !'�{+��Eʩ�q��4�A�U��z�6��6� ;�6-��{�R[����Y�-�ywݲ�M��2c�ρA�C����S!�aP��U�A���VOK)$U*������6�}�1�9&DF��]��B��+Ϗ����z���J2��he����Y�p�W��nÍj�.=6����pm�dqhw\��'~k9����ӹ�a����ZQ�ׅ�,.��ث��w�.S��s�>l�b�P�\x3�|�?%�5�����Q7�[�VԒ���mQD�-dV�cʂ���3���+g�;HH�xV>�6�H���Y��9N�l#i��x�*�L)N�Q�p�>s(��d�n+ث�ĕ=_{;y�6枔���F�|��W ����;�61��3���`���V~�d�#7����~l0eoA�4�ˈ��fAo%d������d��ڶ�)9�6�����D�^@o�h����K(��&y'���+��<��Ҳ�]R����]g�>�q�h�A���{��>?N��zƽ+G
-`��pO��tm��7����6'.U�]�I��8+L�n;�|;׼@�e�d���c�_CD�c�������W(�	��B �ٺQǑ�-����8U!]�~��-f?��JQ��)_�c���O�X���+�U� ��.a�ܿ_��y@��8?�(��^U#H|F����gMiW�4���pc���;޳��X{<�L5�eN[	vC��,o��#JVQ_ɓD���9��^�j#QI25�)F�4U1�d?��*1��\	3ш0�aNp0;��k�-�wD���ի;���+�\�Orc�u�sGAmG�#��>��YH��]GH�멝�!��m�ڗ��j$�W#��}����|�F�0	��m��Ȏ��=
-�Ƴ�����l��IWX~o�>�ڀa��}�gc� zM���i�����K�B4�aL5�w�Ϋ��IÀ(�0O��=o��%r=�.��x��#y{=>m>�p��V�~���t%�g��2�zl�"����|�L�O/��G�C)�6�W۴ؽ[aJش���"�#�	'H~����1�S��U��� �7[ �䊏Pl��9��M�l7|#��s5\p9���4N1m�o+{��K���J���'0T�u��� �[4��XT�[�쑐wW$���t��+q�h��kݒ�a�ǀ
-�0��kM6׏Oof��Q���C& '��1�m��J�nV{v�]�0��By�Ja�${��{���7��N�"�S�s8,
-:�=�e�$"aFYU$�7��2�(
-���m��_�v����Y�jݐa�jk��L�Җd�<�ky��j@9�65o�m�SsCiW6*=u<�9�vu]֦	kL5��p�jOup���NYq<� ��[K�+1�(ք�����z=bPS`i�L7�OZ�,�@�
-��f"2��� m�������O5ڗ$�ё6�hDsj�s%L� ����̀D�k�o8�@����5�̨y�v�z��wKd��(�8$�3���SH!P@�$�~zza���p�G��ٚd�Ǚ����'�&�:��>�|m�[��v�f�����91iHz�/y���L�=&s\��z�E��%��B)_$a�\��Ym�ۅ�&�E��:����n����o0��n���f8\��W.l�"
-��%� ��۸�KA�fl�>�{��rsߤ#[+Ӷmb�����?ޕ�x
-�JrD�+<:/ǲ��R2�Z��<"E�n�;AqRp'b��c/��.�Z��X�s�) �1Qig Ӗk����lI�ѣ֕h�X��j�kȿ4��g}���k�r�S�͵�	�'�TB�j�^
-��8��]����k�d$��k���g^и_�*�֯
-ۚ$[S+�(�_���?�����C7�d�v���*�������eՌ�T
-ad9[F�&q��@�d�� EPoI&������*�H�;IwƝGb�D�WZv�:��K�Y�1
-�6` �{���3��e.�и�E�4  ��qe/��  �X������HR�/@ *XzB^���x'�A�V`�:    ]@�����#��
-���Nؘ�d����%J|RrW��;��j#�Έ�qF�5�A��2\�&Dmˌ���=Fd�.i,rh��sDm��3���Ux2
-U� �
-��D�W�-��x�Y�Y��+��Mj���ĲO�� ?M�\¤����*k� п��EI1L]��Nx^�(@S��!�N��/�*:F��m�n����+ζ���B����
-k
-N���{r���kw�v�`��V��w�E�{���U��e��v4,�Q�Fq$�W|b]D����?g��2 H�D�#�p������!�me�c��Ph���C�\�qT"ud��	�t��^ڋaLb�@ۃ���]D�K���:��=+��x,H��#�&
-q��O6󁳜_F�k�cݯ'Pgs��5��C(���0̫��-n ڿ8�I�
-�@�ې��w4ҫI݅�7u�����?:,��8���Kt��#=U��s1I
-�J��F�?&LDh�"M��ũ0���L��eG��M�.3�ih��,�Q�(*��ǵ�8�&��S�b�|iGw�@!�艓̪�/���a�T���YB*ޟē�o\ز0k�J떃w�
-Sv���J��ˊJD
-��(nv���\�c.2WZ�V� �efl1*>�@�P�������تo�{��R���Y�}�G,\i{�ޢaٯ�`f�ͼ����$�V�-�Q��>�H���_�y�������¾���\؋�N���(م~E�uA���z�P9�t�C�iV�<�V)��\��"�¡�2%X������i]�W�y�@f�.�
-�r�=/��L�]xC��t�{,0��\��(�ސU�P�є�Hp���4��
-gV��b׷��:Gg ������.���(�D( %u��tCh�x�iT&Y�i"���5�T���r�^N�,3��+�C�<燸��҇7N��J�,������1��,;
-A�}6�2=�Q����*fKT�����:ξ�8#]��)�IǠ�5��[x/u���ǜ:�=3R�?�daN�����z���5�� ���Q��CR#��(�~�
-tK"�8~e��qI(82�?
- ���Y(^U�ː��v����Q#s}�����v?��k�O3����㦨YF�ڂЕ���].�1_P���H-H�U�'��3�n����H�n4]�+���j��Ҋj�o!�\m�L���N�žޭ3�������/�kU�o��������Ƌ�6�L�ܵfk��k������$2���٩�V����y�P����h誅̈"UKEv���H8�=^����!ՠ;)�K��i'���,{� _e��
-7�!D�`�q[�]�%Ɂ���� �3�E��A���*d�	�C,Ʊ��M}
-|�p�('�H)�ԕ����jg�	xs��1Ծ���2���)\�u�?���"��96,i��(�o�2�J /�/�cy�FW���j��0�������{I�p,_h�����}����q�c���65��'��[&z�!�h�H�I6���\B�`�`ED�d�(##�G4n�'s7ґd�4߽Q���ҶbCQ��Dp*	˕�"�W�&筷��Γ`_,�4���s:�=)���M�ӀB�iC|�)m�.[C??[��||��iuX�3�5�B�Ӹ�(�b���Hq1��muK-4�7���C�H�������Q@�c�P�Y�=e�..���r�!�
-O^h�, R�r�:�)l�#�B�$�����4�eI|L�"S���j���-�٩v��+Y�$X/�+^�-�)MNў���w���lb��e���>Ә��s�Fv ё�Dϡ�d
-��������3�n��8,��2��O�k�:�U�\-
-�:XꇒFl�S���R*��hB�
- �w��c^��ET�Y@��A�hI�C��n�-Z�)Ü��%��5	���ѵI5A�[����5��q�X��.bv���	Aʶyڃ95�����A�4�˹g
-=k;1���=}�by�ͥ
-�5n���� ����aH`O<{B4*��Л�5]3�?� !V����Y���Z�ɢ�)��՚�N���H�UU�؏�<�ã�鵲���:���WX~�	^�}��3:R���E��V<}·t\�������_p��P��hɏ���;J)���$x
-��)gL�3X�Z����r�Q�g٦:��Q$;�V� Y�4���uKE�ņ�5u#ϑ!�4�Pg�3�$���U�⒖Ϟf���G�� kI�2� �Lt/���R1�>O}r�������"l��	�c�J��A�&+_��֬���wa�Bz��tj��K���QT��WqbzRH݉o3��<
-���'��Ƅ�֓N2��8�2(��h��uh�%d�F����eq�8���+��/��=�b�O1�.K�x��}p'�N
-��?����@[Q8r���
-Y�5�:�������~���~]r��,���z�GE������ܢĥ3h�;X/�6���y�8CK�+E|��C��c�r�&��f� �O�٫$�V�a
-kV�"#�Ťԫ��tm�	~tt��^b�̃"�Z������Î�~7��PI疑Ǫ���F����M�P��f��jG�m	)>.bڂ���k!�}������{�!�R�8;`�V&um)�=�r�cSi]!/��W:Ml}{�d�z�Ø#lV������@��C���[�&�`�ؾ�-����D��B��X�_a���75��A��'`y�V������X9|
-J��z��F6K�F ��1M�j��&�����q:
-�>]x�0�V	����s�ی��1�" f+�;��1�E����Ҫ$��:����{j�2���T-틜<�G��=����?��ў΅��a���C/���&b'b9=v�8z���H�ma홀�iv���H470$u&m����b�ܾ0�*���}I5�h�}7� A�	���g
-��/�3�S1<���� ,��;N�a��CY6�l�p@��,;����;jg�cjmZ�P����n�O����ԥ;�Y��?Rt���R�,8��FI Hc�o�aI\�Ș����ߧb�hNjj�=�=�0Ѵ]�(���țF +���"� ��C��r"�eJ����wV&<&q�֒[��EC,��5,
-��A](��& y��l��*���Cn�`!�C9L]ԺtQ�v=r4��3 :�����j�r~Bk�{�Z�9E, �)
-f��f���e�|��(�'�Aȳ6(X��<s��Mԥ{�9�������j�w��e!��P%��[E�Z��%Eh&��$�Za rIG1�\x0��iY:��kL)T�t-#�U3�T���^5Z�1�e6��GnFǍ�a t�?�w�8=T��H?�f=SP����((��`Ɂ�E+���^�vv�;�s7�	@�R 2ߧRX��Ⱥ�w�	���۸.Xi��0�4��rK�ԇzK77�3�
-y�rd;WB^�k*��Q],�Ż��&�>)7�w�x�s���V�q�.�)n���#_h$k��`�Zߏ�C�g~>A��+u4�g��1b����.�E1���C�	�I�ȟ����Ut�DԸ�1�a�/��I��8����E9�J�@Ч�c�~yM�ly�v��C���tQ�vz�aB����p�����k�/�j�^��-I��R�����)3���ɾkE���1��F���Obir(�<Q�ɶ��uVkW�	�~�I��`k�	�@'��e!��M�_�k}3�VX^}O��P֬7����"��t�i4��~�B��σPJO���6�Ϯߘ�����7�?�{�֛�Heo�6����t"
-Ĳ}�� ��P�g�=ӪRSf�(��  ��T�xqЀ`TG�d
-w��q�B�?Ǡ�	�}d�G��)�ف�q9�.g2,�4Px9>|�,�Z���|���PP���6�n�"��|"����%޽w��MD� �Z@�g���� 7?���ޱ��f��7ˉ
-���-�o�rP��BI�A,�FS{�@���wS��9��v����0Eʺ�''���D�8�0����/@���Q��$r��I�@��)y�l2̈́k�v���PH����e%����+>�gC�z��;��A}L�Qc#p����/�\9�,t�ѻ���P��F_�$H	��C�����>xO󔤎��e �
-�j�x<�$��/x��:���/�=�Y �Z�<�'���?.p������X��'@+ #�=�3'�R8 A�qA��6�x�Frf�p�=�S��a_B�r����`r�+�^�<�z�<��j��_OI���ܵBL�>�{�Lᄺ�m�Ǉ�1t`Q�rQ��M<h���2��S`Y�������u�,\*���U�+��몘��O�ß}p�e6��\'�M�H�����Rٴo�@G���f��1>�Q�����tlإ��頨6d%*
-�	�_�q�:�jZ�ފ���AJ��
-oFJ�����n�L��2��Uk$��T"��4���D{q�>���>�Z���xk��g�T��'\E����B���BO�3Xu��1(*<o1YX��;�bl|Ў�@�%7�C&W�	���Ӎ���,0�z:�p��@]�6�(��T��r��u��J�w+j���TZ����D����j6��S6$ZŃ,Z!������<��]I����9�<Z��X��j�%����	��R#�>A]�BL��7i��荥��r�n5Cu�Њ�m�/ә��M_Q��`]�u���M�ط��,h
-�����G��09����V�\8W\��a��T#�2s��)@#�P>�`��q�檄Q�p"�]cI�L��S�q+��:�fE��uH�8�Iz2s�`�a��"��~K�=��B�U�Qg�@o	rמ���YҘ�Y���B
-�����f
-A��U��WR�%�M��b�;h15\��'����D=��͢��Y�yO������&��w�h>��
-l�U���&��������?���/L�fw
-ͦ���ل��"b
-����V�	�).[
-���:q�~
-��i��M$�-m�/��$;�e ͈ƣ嵟.>�pI1�ܔ%S��ȹ���ĎA��n�`��N��mk�0�m��X � ����&ڔ��� 6�??�	��t���� �15	7��{`On���Xo�.�;Cj�%K(��
-)�dIY�`�A��6L�l(�Uk.�5���&���ty`;�����ڗ������$)�{��Z�i�O����0%�Y�`h�W����@9齋&N�5�8+�el׃#����(y��J���]-K��=C*� �0�U&`��Q8�^�Cr�9�>��"�h="�B�̞�I�or���Q����Y+O��'���������]�(97����g�g�I��v�/bF����~���'�I̕���|���p I�4�tݮb����S�轨9�J��;���5�}B��{���f)������L�x��dX����.�iʏ ;pLr�;иB��!�K����%�B 0� ���
-�(J^��,«��`��0wO�9��kEpI�`�~�;9�����;���s�T�$ ��-Y����-29�h,�(/�[R~����N���	
-�y/������1���)	Xw^3H�*PK�L��3��9��
-:�b�%;1H�@�8f��eT
-����`�q�P�j�#�V��?�~���An�'&x8��db��-���/�~���M�`,�U������45�[��a�fk�r�l�7H�������Ѡ@΀��O~x8�P����PM~i��F|`Q��J�k!�T2��c�E����0MH�A�F��nW�\���),�v���_O�׈����&�YxTC"&��;(�|K"�����Q�Q]�Dȏi�:��|DQ>8fD�L�6���_v¡�o�P���te��6�c�q*@���VLs�t����)y�T�Ja@��������H�E3F�c�%1� I�5�!�S�&U3m
-�|;�g�!��!D_��MD�F�=�|��W)r�Q��}
-�<��-�f{�ېH��wՓ�*���}f'E/�!;K�a���Dp���jk�M���gc�ק��
-��D\  6:���~&/��W�7�}�
-�J���VÒB�g�f>>U��냗89OX&�}DЙ�);%���`
-P~ls��-�g��Q@z��| ���'hB�ܭ�s4��>ʈ�ŴX��pT-����%+�Z��RT���_���J�P��;9�a�k��3��J�o����'ހJ�`*��(��d�e�;�'�뫼r�A������խ���~(m�����
-�',���4�
-�"ꄒ��P6l���P��QOl߆�����,��N9������EZ��K&~�/�9��}�Г�����.9�Bju���j����[� �'�r�u��h@�UMn��7ȇ���D�
-�yT��t.\arl�76�&ׅ8��VQ�����.&'�yht�e��9=����$�>"taZ	����Iˇ#K�������ރʘ���G6�>�yL|TU�����Y���@U��=�@�>�eQ5�:�xI`������F?�p:ȭ/c��3�s��ԓ��!&4<r����d�en�%�����4̊� :|�gk��F��T=�6)4g=��|��	�Ç��X;ңl�� I� Ε�>j��D�a��FxxRQ�O�e%����&3�Q�Z
-LJ��h[8���.�y�y쨈�D��P���5�����SI���:N d�g��,.�|�%?�p9aB7غl;)= ����S�ȒL������k��s�Nr
-b��֛���YΖq9.�M��A�B
-]�6��Ʒۦj���E]�d����x~]�q��U����Ҳ�c�Y|H�O�
-Oy�E2x�����X�F}�<o4�|b�c�g*���vy��nۇ�҅Q�%jנ�#���4}�FY�
-�j�V6F��<%/��AYV���e�lPH��Ɲ�oA�"L� ���#
-���B�H���	��W1h��*��� �'��sr�0;�_����]�6�?�� 
-�2�z��`Hp��e,�%��u��Υ�m�/uТ����j��z���5�V��I�~�ݏ��ë�}�xx��}qL˦֕�N����@�wbo�ƪ����8Y�o�+rۤz�m}P�`�U��SCG�%�g5���Uu�����>���S�F�ݪw~�O%݈y��/�A6n `��PE���"��D!��9j��5ǂ4
-QK���l:��*x�0�W�I��0R�o�����(h	C.v�{�IZ�Dߠ�����lw��M�S�u��l�#�-y�I����F�d����5�ކ���er��Vx�p�dTο�6ԩ�}`�A��l�/̔��H�+`{���!H�Gpg>�{ե-��kp�Gҏ�=#*�O�M��:��.u��X���8�1��<�GN�M(P�
-b�f^�j�#E��[wKPQ1��b� ��;��-�����֝�*2v^n"r�x��n8=
-�����U,��-ȫ q��0vr�0�I����[�zk�$m�K�/�&Uq�O��_ʍb4�����1�Ǻ�x$'��IԄ���-�=���:�D�o[~#��n�S�2|u}E�A ���^�{����) �����{�o�����vU�`�3��ɐY ���髖�� �}ع_�U^h��v��P�z���6��X���Й�<��I=��eKK��.YE ��z��!��ƚ4@.��8�}�pm硢��#���xϹC��9�_�7M����]^��K'6ڱ̪[}�ΰWs"<�|�&��Y��[�o({��_ĭ�l
-�Z���`5����j�<N�R�kj6�l�믡�K���"W^������u�_�v&�/(�^��ث�93vz+ih}n��h*$m�!�\��}��&���&�s0�/
-d�of�H"\�Dk�]G�$|ce��d��xG��AH�d�|�!��1u-�*$~_Z'	��-4Z�r\i�
-�2���Յ���fe��˕�h��ӑ�e��Ϳ}^��S��
-%���.��0��h��
-�M�[=ιs.��soHur��"dd)�`i�ι�i�>͔���m���9�b ��-t�Kx�X��f��r�4�k�
-��C��������I�'�K�ۨ0:)8*;����ntb��
-�ͤ3�?��zC�4
-�D��/7�1÷O �C��������AV�+V���!�@Nͨ�t��3=Ϋ�(U�띬�J�o� ��E�Q��6��1�zr�q���wAM��m��]�8��
-����}���j;k��I�C��ԇ7$R7�j7G6��=������$�N��z5^�AБ^�POy�';
-˛/�_�D��m�mm��0�'8#�   ?�Q}Kɢ��r�C�G9k�.ǋ��xbʬ}��OL��6y!i��訫ٳ�F��������ll��>���Kaj�� ��[g��*@ѿ�"PK�K;l�m�]�R�,>��H.+�A�#�U肴68A����5��"܍ԗe����P3�s*!2"��p���#F*��RG�Jl5%��h���W�
-�6��	�q΂}�\/����.�/���O��T��Z����S4u�J�
-B�(�[��[�Qz�3'�1Ih��Z�_!! O�t̋N���k4�Pa�{*�3���1ޠ]�� �̳�<-�֠�Ad���ˇ3}�+�-����7�H Kj�M�=By��t&!�%c��*.�n�i���3��o�< �����+��6�}u�\�NCa���*�>�uƽ� �����]�%�v	��<(H��Zu�ꦀ�X)�ς������@�^��`�p(���'�=I��,(F'o�i*��	�և��٤r�o&*��gR�qĞx6Ƴ��b�|���g������h5�=<�Z\��bl��V K�\��}H���Ҵ����4ʚ>Ʌ8��
-����~���������C��)Ǭ�5;7c�U�m㸵Hb�|�^�'�j�kj�2%�)���m�h�c*IdgH�0f�Ȭ�bc��i8�T�mg�fb��%�Ӈ�&�f�β>=c�l����w�7�j�Yb�.h/3�j$�����
-J�b�e@�cV*�?h���9�`��I݄�ʍ��#U�����>_��5a�5����fZW�|�+�gς���/����5g���p���:E��ZfY[oa LC� Ӌ�,���X1�3�����^�X�LF�����U�oU�.��`����e8 w�V���Z�<[%E�ڲ�R�/�������̠�j���n���G��ާO_��~��(WsI�/pj�1�
-+D����w����;��G�����\q*�����4)���j[?��-�b�eOLm��鋊�:H#�AA��-$8{�DE��ut��[�WQ�\������
-���(�2U��Gy������U��{�N���3�t/&@�u�%���`�����S-�F�l�F9�H��?�����=v��b1֏����'��tص�u�Җ �5�cT���;��J)Cg\J�����8�x�#`��k!cf�Utȩn�[����mܳ��j�OnǦ3�K~�2z��Ӝh3������NV�9L�*�$q/��爐%c��=X+4	�/N{�v��S��U0b���{�uM�|��pr|7�;��!+�0!y����-m������!���Շ�
-u�(Gg�������l��7���:���G�P��f���jڪ�^č��9a���8d��>^�ԲEٟ)�\��1nnP\���)��l=�ތ��9��gn���m�w��iEpFڶ8
-; �;D�����s���&8���Y;;=�^�?!g��@-� �
-�/�=,�l�BH��^x��\�0r��P ��|:@�����Z
-#��&�oK��!��,i��iN����׽��]VVc��hן�{�5�{����bW��&��f�{������z X��
-�rytf�Yp��A��)��[ʨ�X3�=�!gK��1���CL�hS�v�?�BC�
-?��ꬵ����?kK��y���џ���f9�Ff@��p���lY�5ӝ���VW��y����kPA����	5
-օ\�G|�Y��(
-�^­F�U(���W�.��C��l2u,�|�0%��'aiyQ|-v���[�¯�N��9٥U��>��/`���%jC\M aι���k��*��M	��=]߽(�V�b� ��=��ghɎ
-� �f�X� $�H|"�*H�>�F�'7�$�M����:ȍ��}�e)
-�m����ਿS�ss��^��[���0K˟��t�.;�yY�,���h�tY�o�QY�|�	L{=pHXد#�J����Qj��!%7���1�O��C�i�:�/I�"K$Wr'�� �3OR��hCJ�+��BW�#�A,��t��*�[ӗp"�e��ml��Z��K�?�&Nn�q��������_�§�׸qd��}P������e�w=y�#,�*l3�����@*��u��O�����
-��RV������>N�Mӹ��a��N� 
-I ��� �J�0�J�]�������h�r,�3�(`Z �[\��E{��
-��܌��O���
-g��	�̨��@��V}���F��W�N?>»fP����vʂ����V��(b6��&;ͣ:L�������G����J����P����\����r�������"Q/��͒���d�X��Y"�J5t1����g�Q`5�
-!IJ9���yZ٠�g��vC?�L#��ދbڬ��']
-�j��p��f�O�$�I�S;��GVK
-�b���k� d(X{��1�)����>DG�� ���J�j�dŐ��ET}�\��
-OtR�P��l.��<��z3q����RV��t��8tN���`ˍ��]l��-�ۦ��Y�[5�1q��o��-=��n��Ar�8_�y�uY<	f��SE���
-�a�v�а����m9�>��\�7%sX��G��4�gzh�����(s`�b��^��&
-L`��X��w�h�B�!P�D�8-�1䢦'J��˽���ltLo3C%K�l��L~#I�_��Ix����>�[�'�e�?�Y��c�P�LA��*\�v8�ȋ��R�T�&�$�}��z��,�+����?h'�v8:��5�r_g��q:+�Xܦ���#e�jy�&-���SU���Y��� d��h��q,��~����[Cr�]�I���[�
-mH����hεe9Q����a� AD�:j�lk|��?��ӳS�E`�)��Q��80���ȣX��ĜX|ḽ�%��bB��{A��<�c�\��}��I�g��Y�xޑ>2:��8��mC�G�r���� F� �lފ��\�#���	"��J0,}G�w�4��^l��N6kCH��jV~A>�|��r��Tjh�{҉� �3}���P���,{�Q��\��+�l�p�+ T�� ��o?)��^�o�d�k���C�n�26e��m��m�d�5���*��b��ܝ���YbFVl��o�	6����jp=�$=��~�;'��{�v�sT�!��/4=��ݽ�L=�b��ȍJ]�;�<���$�o�sT0�H�� }�����	�|æ���9�D�b�i/�ߥ�-뇒'}S���Â�a�ī�n��z��u?ʿ�*���%��.7@�̠��v��3�_��O�`S�k�����V�a�hX����y�v�vd��?�tmwaU�\���l�F���;%��}����ޝs����w�aS�5�|�
-F3�ZM�h
-\4�C���G#�)+K
-j�ǌ{�kҞy��:�¥��R]��û,m �s9�G���G��j�a�������7�͕�gA#t�/���P?�3��*���� ��ҾCBx��ch����٤�����
-�`�M� n����+t����%ˢk��S��/0Ο6]=��r�eY��&aw1�@�xzt�Næ7+�_��xs �b��
-'�l�<��w���,�p���V 7��$��)
-V`���߲8�i�dg�Q�ے^؂J��x����"�b���}�Ll|_5�|�����X|���I��붍��HL��yeb�L}T���_f�Ȇ gg��_�L�]��Ԋ��b�P��y�Q N����Y���	�#�(�J2ct̈́;��9���!�i�6�3`��x&��J�=���찇�P����2Ө�p�M\���F<;d��ߊA�o{���Q;�i���}0�cir:�MܒJ�Z3���"�D$\�%���@sV#���Sj/u��{�3
-|	�+�H��3���`FK
-���<A�:�ǙtyL8L�魙}D��Ya@oQ�T��Ũ讔׵�#�n����
-  3����?	�va�N�7  �ׯ�qW�^ݔ�Y� {�|�f�,���y�  EXIF�   Exif  II*                V       ^   (              i�    f       H      H        �    0210�      �    0100�    ��  �    �  �    �      
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0e234145-ed98-4431-8100-784099ca4a53\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/Java Theory/Java Notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Java Theory/Java Notes\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"git-widget-placeholder\": \"main\"\r\n  }\r\n}]]></component>\r\n  <component name=\"TaskManager\">\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7666dc27f6e206e4e9b2d52f3391b893744e1464)
+++ b/.idea/workspace.xml	(date 1748944886378)
@@ -5,6 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="0e234145-ed98-4431-8100-784099ca4a53" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Collection Theory/Images/Collection Hirarchy.webp" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Java Theory/Images/Abstract class and Interface in java.webp" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Java Theory/Java Interview questions" beforeDir="false" afterPath="$PROJECT_DIR$/Java Theory/Java Interview questions" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Java Theory/Java Notes" beforeDir="false" afterPath="$PROJECT_DIR$/Java Theory/Java Notes" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -15,15 +19,53 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;Mahesh100&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/Mahesh100/Java_Practice.git&quot;,
+    &quot;accountId&quot;: &quot;600d7dd7-4c01-402a-a95a-9cc752cc7a35&quot;
+  }
+}</component>
+  <component name="ProjectColorInfo">{
+  &quot;customColor&quot;: &quot;&quot;,
+  &quot;associatedIndex&quot;: 5
+}</component>
+  <component name="ProjectId" id="2x5lZ7FJiGvzcytc2qEWvSTTbls" />
   <component name="ProjectLevelVcsManager">
     <ConfirmationsSetting value="1" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
-    "git-widget-placeholder": "main"
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "add__java__question",
+    "ignore.virus.scanning.warn.message": "true",
+    "last_opened_file_path": "C:/Users/mahes/OneDrive/Desktop/Java_Practice/Java Theory/Images",
+    "settings.editor.selected.configurable": "preferences.pluginManager"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\mahes\OneDrive\Desktop\Java_Practice\Java Theory\Images" />
+    </key>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="0e234145-ed98-4431-8100-784099ca4a53" name="Changes" comment="" />
+      <created>1747235870292</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1747235870292</updated>
+    </task>
     <servers />
   </component>
 </project>
\ No newline at end of file
Index: Java Theory/Java Interview questions
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n1) What is difference between Abstract class and Interface?\r\n\r\n2) What is difference between Abstraction and Interface ?\r\n\r\n3) What is difference between Exception and Error?\r\n\r\n4) Difference between Checked exception and Unchecked exception\r\n\r\n5) Difference between Final ,Finally and Finalize in java\r\n\r\n6) What is Multi-threading in java?\r\n\r\n7) Can we start Thread twice?\r\n\r\n8) How threads will communicate with each other?\r\n\r\n10)  What is output of following program ?\r\n\r\n      class demo{\r\n      public static void main(String [] args){\r\n      System.out.println('J'+'a'+'v'+'a');                 //sum of ASCII values\r\n         }\r\n        }\r\n      }\r\n\r\n 11) Can you pass the List<String> to a method which accept List<Object>  ?\r\n    -No you can not pass the Lis<String> to a method which accept List<Object> ?\r\n\r\n 12) What is Generics in java?\r\n\r\n 13) What is idempotent method according to HTTP specification?     //GET is the idempotent method\r\n\r\n 14) What is feature branch in Git?\r\n\r\n 15) How to call REST api from your spring boot application?\r\n\r\n 16) When to use Abstract class and when to use Interface in java ?\r\n\r\n 17) What is advantages of Stream API?\r\n\r\n 18) Difference between Runnable and callable interface in java?\r\n\r\n 19)\r\n\r\n --------------------------------------------------------------------------------------------------------------------\r\n # General java questions\r\n   1) What is wrapper class in java?\r\n      - class which converts primitive data types into objects\r\n\r\n   2) Which keyword is used to define constant?\r\n      - Final keyword\r\n\r\n # Constructor in java\r\n   1) What happens if we declare constructor private in java?\r\n      - Class can not be instantiated from out side\r\n\r\n # Static keyword\r\n   1) Can we override static method in java\r\n      - No\r\n\r\n # Multithreading in java\r\n   1) What are ways to implement multithreading in java?\r\n      - By extending thread class\r\n      - By implementing runnable interface\r\n\r\n # Interface\r\n   1) Can interface extends another interface?\r\n      - Yes\r\n\r\n # Unboxing in java\r\n   1) What is unboxing in java?\r\n   - Java compiler automatically converts its wrapper class into corresponding data types in called unboxing in java.\r\n\r\n # Exception in java\r\n\r\n   1) What is unchecked exception in java?\r\n   - Exception that occurs during runtime of program, it is also known as runtime exception.\r\n     Example of unchecked exception are :\r\n     - Arithmetic exception\r\n     - nullPointer exception\r\n     - ArrayIndexOutOfBound exception\r\n\r\n   2) Can try block exits without catch block?\r\n      - No\r\n\r\n # Functional interface\r\n   1) What is functional interface in java?\r\n      - Interface which have only one abstract method\r\n\r\n # Garbage collection in java\r\n\r\n   1) What name of method which performs garbage collection in java?\r\n      - finalize()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Java Theory/Java Interview questions b/Java Theory/Java Interview questions
--- a/Java Theory/Java Interview questions	(revision 7666dc27f6e206e4e9b2d52f3391b893744e1464)
+++ b/Java Theory/Java Interview questions	(date 1747118670075)
@@ -59,6 +59,35 @@
    1) Can we override static method in java
       - No
 
+ * OOPS CONCEPTS *
+
+ # Inheritance
+
+ # Abstraction
+
+   1] Abstract class in java
+
+   1) What is abstract class in java?
+      - In java abstract class is used to achieve 0 to 100% abstraction.
+      - In abstract class can have both abstract method and concerate methods(Methods with body)
+      - We can create constructor in abstract class to initialize instance variables but we can create object of
+        abstract class.
+
+        Example: public abstract MyClass{
+
+            public void m1(){
+
+            }
+
+            public abstract void m2();
+
+            int x;    //instance varable
+
+            public MyClass(){
+             int x = 10;
+            }
+        }
+
  # Multithreading in java
    1) What are ways to implement multithreading in java?
       - By extending thread class
@@ -90,5 +119,5 @@
 
  # Garbage collection in java
 
-   1) What name of method which performs garbage collection in java?
+   1) What is the name of method which performs garbage collection in java?
       - finalize()
\ No newline at end of file


# There are two types of IOC Container in SpringBoot:

    1) Bean Factory
    2) ApplicationContext

Bean factory is super interface of application context
Bean factory is deprecated in earlier versions of springs.
ApplicationContext is extension of BeanFactory which will provide some additional features.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# POM : Project Object Model

- When we add starter jar it will pull all the jars inside project ,in which we have one jar as Auto configuration jar
- In Auto configuration folder we have folder called META-INF/spring.factories, inside META-INF we have spring.factories file
- Inside the spring.factories file all autoconfiguration is already defined.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# application.properties file
- To change and customize the spring boot configuration application.properties file is used
- Stores the data in the form of key and value pairs
- we can customise this according to our need
-

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# application.yml file
-

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Inversion Of Control (IOC) in Spring Boot

- Spring IOC Container is predefine program or component of spring which comes with spring itself
- IOC Container is responsible for creation of objects, holding them into memory and if needed it also do dependency
  injection task
   Create Object, hold them in memory and inject them as required.
 - IOC maintains the object lifecycle

- Inversion of Control in spring boot is one of the component in spring boot.
- It manages the creation of objects in spring boot and helps to inject them whenever necessary

- IOC means that we are inverting the control of creation of object from user to some external resource.
- And that external resource which is responsible for injecting dependence into our application is known as IOC Container
- IOC Container is responsible for instance or configure object and it is also responsible to inject dependence
  into application
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Application Context :  ApplicationContext is the type of Spring IoC container that initializes, configure and manages the lifecycle of bean.
                        -Application context handles dependency injection which allows loose coupling between applications

  - Application context is interface which represents IOC container
  - Application context extends bean factory  (Application context is child class and Bean factory is parent class)
  - Application context has bean factory methods along with its own implementations.

    -We can't create object of Application context interface :
      so we have subclasses as :
       1) ClassPathXMLApplication context
       2) AnnotationConfigApplication Context
       3) FileSystemXMLApplication Context

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Annotations

 1) @SpringBootApplication
   - This annotation is present in the main class of Spring boot application.
   - This annotation is combination of three annotations

         -@EnabaleAutoConfiguration
         -@CompantantScan
         -@SpringBootConfguration


      - EnableAutoConfiguration will configure various component of springBoot application by just
       scanning  dependency and class path.
       Whatever the dependency we have added in POM.xml file this particular annotation will scan these dependencies
       and will load all the required jar for you

       -@CompantantScan
       -To scan spring component in particular package
       -It scan all

       -@SpringBootConfiguration annotation internally uses @Configuration annotation.
       -Used to provide java bases configuration
       -It is class based configuration
       -Use to make java class as spring java bases configuration class.


 2) @Component annotation:
    - @Component annotation indicates that the annotated class is Spring bean/ component
    - @Component annotation tell spring container to automatically create spring bean.
    - So in annotation based configuration we can tell spring container to automatically create spring
      bean for a particular class.


 3) @Qualifier annotation
  -This annotation is used to resolve the ambiguity happened during injection of spring bean.

 4) @Bean : It is used to declare that the corresponding method will produce a Java Object
            which is managed by spring container.

 5) @Configuration : This annotation tells spring that the class on which it is annotated provides configuration to application context


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Security Annotation

1) EnableWebSecurity annotation:
  - This annotation tells spring boot to enable web security in the application

2) @EnableMethodSecurity :
   - Provides fine-grained control over access to specific methods within your application.
   - This annotation allows the use of annotations like @PreAuthorize, @PostAuthorize, @Secured, and
     @RolesAllowed on methods to specify roles.

3) @PreAuthorize
   -Ensures the method can only be accessed if the specified condition is true.
   -Generally applied on method end-point

4) @PostAuthorize
   -Ensures the method can only return if the specified condition is true.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# JPA Annotations

 - @OneToOne  -@OnetoOne annotation in Hibernate is used to create a one-to-one association between
               two entities
               We have one college ID, a college ID is uniquely associated with a person.

 - @OneToMany  -@OneToMany annotation in Hibernate is used to obtain one-to-many relationships between
                two entities. It is used to map a collection-valued association where a single instance
                of an entity is mapped to multiple instances of another entity.

  - @ManyToMany -@ManyToMany annotation in Hibernate is used to obtain many-to-many relationships
                   between two entities. It allows us to create a bidirectional relationship between
                   two entities where each entity can be associated with another entity through
                   multiple instances.

  -@Query       The @Query annotation can be used to write more flexible queries to fetch data when
                 query methods can't be used to execute database operations.
                 The @Query annotation is used to define custom queries.

  -@Param       @RequestParam is used to extract individual parameter values from the request URL or
                 submitted form data


  -@Transactional :  @Transactional annotation is used to manage transactions in a Spring boot application
                      and used to define a scope of transaction. This annotation can be applied to the
                      class level or method level.




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  # Starter Dependency in Spring Boot

  - Starter dependency are the convenient method to add dependency to your application and it brings in all the
    required transitive dependency from the maven.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Connect Spring Boot Application to the Database (MySql)

 - First step is we have to add Maven dependency in pom.xml file

    <dependency>

        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java </artifactId>

    </dependency>

    Add properties to application.properties file.

    spring.datasource.url: jdbc:mysql://localhost:3306/employee
    spring.datasource.username: root
    spring.datasource.password: root

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # DTO (Data Transfer Objects)

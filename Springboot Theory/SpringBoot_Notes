

 # Annotations

 1) @SpringBootApplication
   - This annotation is present in the main class of Spring boot application.
   - This annotation is combination of three annotations

         -@EnabaleAutoConfiguration
         -@CompantantScan
         -@SpringBootConfguration



      -EnableAutoConfiguration will configure various component of springBoot application by just scanning  dependency and class path.
       Whatever the dependency we have added in POM.xml file this particular annotation will scan these dependencies and will load all the required jar
       for you

       -@CompantantScan
       -To scan spring component in particular package
       -It scan all

       -@SpringBootConfiguration annotation internally uses @Configuration annotation.
       -Used to provide java bases configuration
       -It is class based configuration
       -Use to make java class as spring java bases configuration class.


 2) @Component annotation:
    - @Component annotation indicates that the annotated class is Spring bean/ component
    - @Component annotation tell spring container to automatically create spring bean.


 3) @Qualifier annotation
  -This annotation is used to resolve the ambiguity happened during injection of spring bean.

 4) @Bean : It is used to declear that the corresponding method will produce a Java Object
            which is managed by spring container.

  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# JAP Annotations

 - @OneToOne  -@OnetoOne annotation in Hibernate is used to create a one-to-one association between
               two entities
               We have one college ID, a college ID is uniquely associated with a person.

 - @OneToMany  -@OneToMany annotation in Hibernate is used to obtain one-to-many relationships between
                two entities. It is used to map a collection-valued association where a single instance
                of an entity is mapped to multiple instances of another entity.

  - @ManyToMany -@ManyToMany annotation in Hibernate is used to obtain many-to-many relationships
                   between two entities. It allows us to create a bidirectional relationship between
                   two entities where each entity can be associated with another entity through
                   multiple instances.

  -@Query       The @Query annotation can be used to write more flexible queries to fetch data when
                 query methods can't be used to execute database operations.
                 The @Query annotation is used to define custom queries.

  -@Param       @RequestParam is used to extract individual parameter values from the request URL or
                 submitted form data


  -@Transactional :  @Transactional annotation is used to manage transactions in a Spring boot application
                      and used to define a scope of transaction. This annotation can be applied to the
                      class level or method level.




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  # Starter Dependency in Spring Boot

  - Starter dependency are the convenient method to add dependency to your application and it brings in all the
    required transitive dependency from the maven.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Connect Spring Boot Application to the Database (MySql)

 - First step is we have to add Maven dependency in pom.xml file

    <dependency>

        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java </artifactId>

    </dependency>

    Add properties to application.properties file.

    spring.datasource.url: jdbc:mysql://localhost:3306/employee
    spring.datasource.username: root
    spring.datasource.password: root
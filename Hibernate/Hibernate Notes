# Database stores the data in the form of tables

# Hibernate Session Object works as mediator between java application and database
- Hibernate Session Object has various methods like save(), update(), delete(), CreateQuery()
- We can say that it takes the java object and put it in database.
-

# Classes whose objects are stored in database table are called Persistent classes.

# In hibernate transaction is only needed when we have to save the data 

# Hibernate is ORM tool
 - Hibernate is Object Relational Mapping (ORM) tool that is used to map java objects and database tables
 - Hibernate is java framework that simplifies the development of java application to interact with database.
 - Hibernate works on database layer

 - ORM is Object relational Mapping
 - Using hibernate we are mapping the Object in java application to RDBMS database.
 - Hibernate makes java application loosely coupled with databases.
 - Any kind of application can be build using hibernate.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Hibernate provides two methods two connect / map with database:
     1) JPA Annotation based configurations
     2) XML based configuration

-  1) JPA Annotation based configurations :
      - JPA is interface and hibernate is class which is implementation of JPA interface

      or example:

      interface JPA implements Hibernate {

      }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Why Hibernate ? Why not use JDBC?

 1) Hibernate removes lot of boilerplate code that comes with JDBC
 2) Hibernate supports HQL which is more object oriented
 3) Hibernate provides transaction management implicitly
 4) Hibernate throws JDBCException or HibernateException which are unchecked exception so we
    don't need to worry about handling using try catch block
 5) Hibernate Support caching for better performance


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Few Important Interfaces in Hibernate

1) SessionFactory (org.hibernate.SessionFactory)
2) Session (org.hibernate.session)
3) Transaction (org.hibernate.Transaction)


# Core Interfaces in hibernate are

   1) Session
   2) SessionFactory
   3) Configuration
   4) Transaction
   5) Query
   6) Criteria

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# SQL query created in hibernate using

    Session.CreateSQLQuery

# HQL Query is create in hibernate

     Session.CreateQuery

# SessionFactory is kind of connection and it is thread safe object
  -Every Project has only one SessionFactory

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Commonly used hibernate annotations

1) @Entity - Used to mark class as Entity
2) @Table  - Used to change the table details
3) @Id - Used to mark column as primary key
4) @GeneratedValue : @GeneratedValue annotation provides different strategies for generation of primary key
5) @Column : Used to map the fields with database column & and used to set the name of column in database
6) @Transient : Used to restrict creation or mapping of particular column in database.
7) @Temporal : Used with date filed in class which is used to save the date in particular format.
8) @Lob : Tells hibernate that this is large objects


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Fetch Objects get() Vs load()

 # Using get() method
- get() and load() methods are internally uses select query to fetch data from the DB
- Both methods come from session interface
- If we know primary key (id) of the record then we can use get() method from the session 
- To get the data using get method :

   Student student = session.get(EntityType.class, id);
   System.out.println(student);                                 // Here Student is Entity class (Table in Database)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Using load() method

 - load() method come from the session interface
 - If we know primary key (id) of the record then we can use get() method from the session 
 - To get the data using get method :
 
    Student student = session.load(EntityType.class, id);
    System.out.println(student);                                 // Here Student is Entity class (Table in Database)
 
    # Difference between get() and load() method

    -get()
    1) get() method from session interface will return 'null' if object is not found in cache as well as
       on database
    2) get() is used when we are not sure that object exists in Db or not

    -load()
    1) load() method from session interface will return ObjectNotFoundException if object is not found in cache as well
      as on database
    2) load() method is used when we are sure that object exits in DB

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Mapping in Hibernate

1) One-to-One relationship:

2) One-to-Many relationship : 

3) Many-to-Many relationship



1) One-To-One relationship:
   
   # Some examples : 
     i)   One user have one cart in E-commerce website
     ii)  One student have one Id card 
     iii) One user have one aadhar card

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Fetch Type in Hibernate

 1) Eager Loading  : Data fetched on the spot
    -Eager loading is design pattern where data loading happens on the spot
    -
 2) Lazy Loading fetch : Only when needed
   -In Lazy loading associated data loads only when we explicitly getter or size method
   -Need to call getter here to get the data

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
# Hibernate Persistent Life Cycle states 

 # There are four states
  1) Transient states
  2) Persistent states
  3) Detached state
  4) Removed state


  1) Transient state :
      - As soon as we create any object with respective fields to the objects by setting values with getter and setter the object immediately
        goes into Transient state
      -Transient Object in hibernate is an object that is not associated with any hibernate session
   
  2) Persistent state
     - When object is saved to database then we can say that object is moved to Persistent state
     - When object get associated with session then we can say that object is in Persistent state  (session.save(Object))
     - In this state, the object is associated with a Hibernate session and is managed by Hibernate. Any changes made to 
       the object will be tracked by Hibernate and will be persisted to the database when the session is flushed. 
     - An object is in the persistent state when it is associated with a Hibernate session and is managed by Hibernate.

  3) Detached state:
    -When a session is closed, any persistent objects associated with that session become detached.
     Detached objects are not managed by Hibernate and any changes made to them will not be persisted to the database.
    -To reattach a detached object to a Hibernate session, you can use the session.merge() method. This method will merge the 
     detached object with the state of the database.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # HQL (Hibernate Query Language)

 - In order to retrieve the complex data we use Hibernate query Language
 - HQL is database independent
 - HQL is easy to learn
 - HQL always start with ' from className.java"
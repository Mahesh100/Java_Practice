# Classes whose objects are stored in database table are called Persistent classes.

# In hibernate transaction is only needed when we have to save the data 

# Hibernate is ORM tool
 - Hibernate is Object Relational Mapping (ORM) tool that is used to map java objects and database tables

 - Hibernate is java framework that simplifies the development of java application to interact with database.
 - Hibernate works on database layer

 - ORM is Object relational Mapping
 - Using hibernate we are mapping the Object in java application to RDBMS database.
 - Hibernate makes java application loosely coupled with databases.
 - Any kind of application can be build using hibernate


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Hibernate provides two methods two connect / map with database:
     1) JPA Annotation based configurations
     2) XML based configuration

-  1) JPA Annotation based configurations :
      - JPA is interface and hibernate is class which is  implementation of JPA interface

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Why Hibernate ? Why not use JDBC?

 1) Hibernate removes lot of boilerplate code that comes with JDBC?
 2) Hibernate supports HQL which is more object oriented
 3) Hibernate provides transaction management implicitly
 4) Hibernate throws JDBCException or HibernateException which are unchecked exception so we
    dont need to worry about handling using try catch block
 5) Hibernate Support caching for better performance


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Few Important Interfaces in Hibernate

1) SessionFactory (org.hibernate.SessionFactory)
2) Session (org.hibernate.session)
3) Transaction (org.hibernate.Transaction)


# Core Interfaces in hibernate are

   1) Session
   2) SessionFactory
   3) Configuration
   4) Transaction
   5) Query
   6) Criteria

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# SQL query created in hibernate using

    Session.CreateSQLQuery

# HQL Query is create in hibernate

     Session.CreateQuery

# SessionFactory is kind of connection and it is thred safe object
  -Every Project has only one SessionFactory

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Commonly used hibernate annotations

1) @Entity - Used to mark class as Entity
2) @Table  - Used to change the table details
3) @Id - Used to mark column as primary key
4) @GeneratedValue : @GeneratedValue annotation provides different strategies for generation of primary key
5) @Column : Used to map the fields with database column & and used to set the name of column in database
6) @Transient : Used to restrict creation or mapping of particular column in database.
7) @Temporal : Used with date filed in class which is used to save the date in particular format.
8) @Lob : Tells hibernate that this is large objects


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Fetch Objects get() Vs load()

 # Using get() method

- Both methods come from session interface
- If we know primary key (id) of the record then we can use get() method from the session 
- To get the data using get method :

   Student student = session.get(EntityClassName.class, id);
   System.out.println(student);                                 // Here Student is Entity class (Table in Database)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Using load() method

 - load() method come from the session interface
 - If we know primary key (id) of the record then we can use get() method from the session 
 - To get the data using get method :
 
    Student student = session.load(EntityClassName.class, id);
    System.out.println(student);                                 // Here Student is Entity class (Table in Database)
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

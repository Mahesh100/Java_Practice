
#  Arrays :
  -Arrays are the collections of similar type of elements.
  -All the elements should be of similar data types.
  -Maximum size with which array can be define is 10^6 (Inside main method) [max size]
  -If we are defining array globally then size is 10^7 (Out side main method) [max size]

    int arr[10^7]

  - First index in array is always 0
  - Last index in array us always n-1
  - Array indexing is always from 0 to n-1.
  - Array length arr.length = Number of elements present in given array.

# All the interfaces and class in collection framework are present in java.util package.

# ArrayList stores data in the form of indexed based positions

# Set store data in the form of hash code values

# Map stores data in the form of objects as key and values pairs

# Hash map does not contain the duplicate key (Hash map contains unique keys)
  In Hash map each key is unique and adding new key to hash map will replaces/updated with new one.

# HashSet internally uses HashMap to store its elements
  - When we add a new element to hashset it actually becomes key in the underlying HashMap with
    constant dummy value associated with it ( As hashMap contains key:value )

# CopyOnArrayList is a thread-safe variant of ArrayList in which all modifications are implemented
  by creating  separate copy of the underlying array.


# Difference between ArrayList and LinkedList

--> ArrayList:
1) Arraylist class inherit the features of the list interface as it implements list interface.
2) The underlying data structure of the arraylist class is resizable or growable array.
3) Arraylist class provide better performance for the add and search operations
4) Arraylist class has default capacity of 10
5) Arraylist class implements RandomAccess interface.
6) Every method present in Arraylist is non-synchronised.
   ( This means that multiple threads can access and modify the list at the same time,
     which can lead to data corruption.
    To make a linked list synchronized, you can use the Collections.synchronizedList() method. )

7) Arraylist is not thread safe as at one time multiple threads are allowed to operate on arraylist.

--> LinkedList:
1) Linked-list class inherit the features of list and queue as it implements list and dequeue interface.
2) The underlying datastructures of linked-list is doubly linked list.
3) Linked-list class provide better better performance of insertion and deletion operation from middle.
4) There is no default size of linked-list class.
5) Linked list class does not implements RandomAccess interface.
6) LinkedList is not synchronised.
7) Linked list is not thread safe as at one time multiple thread are allowed to operate on LinkedList.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Difference between ArrayList and Set in java

- ArrayList inherit the features of list interface as it implements List interface
- Underline data structure of ArrayList is resizable or growable array
- Arraylist stores ordered elements
- ArrayList is ordered collection, it will remember oder of insertion
- Arraylist can have any number of duplicate elements
- ArrayList allows any number of null values
- ArrayList is class
- ArrayList class has default capacity of 10

- Set is itself interface as implements collection interface.
- Set is unordered collection so it will not remember order of insertion
- Set does not allow duplicate elements
- Set allows only one null value
- Set is interface.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Collection Hierarchy

 - Collection Hierarchy starts with collection interface

 - Three basic interfaces which implements this collection interface are
     -List
     -Queue
     -Set


  readOnlyArrayList = Collections.unmodifiableList(ArrayList);


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  # Map in Java

  - Map is interface which is present in java.util package
  - Map does not inherit collection interface.
  - Syntax of Map :

     package java.util*;

     public interface Map{
       //methods
     }

  - Map was introduce in jdk 1.2 version
  - Hierarchy of Map interface

  Implemented classes of Map interface are :

                                     Map (Interface)
                                      |
                                      |
             --------------------------------------------------------------------------------------------------------
             |                                                      |                                               |
             |  (Implements)                                        |                                               |
          HashMap class                                          SortedMap  (Interface)                          HashTable
             |                                                      |
             |    (Inherit)                               Navigable Map (Interface)
       LinkedHashMap class                                          |
                                                                    |  (Inherit)
                                                                 TreeMap class


  - Implemented classes of Map interface are HashMap class, LinkedHashMap class, TreeMap class and HashTable
  - TreeMap class inherit the SortedMap and Navigable Map interfaces


# Properties of Map interface

- Map interface stores the data in Key value pairs
- In map interface key is unique and value can be duplicate
- If we have duplicate key in map then the previous key will be replace with new one.
- In Map we store maximum 1 null key
- In Map we can have multiple null values
- In Map we insert both key values null at same time , null = null
- Map does not follows sorting and insertion order.
-

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # List in java

 public interface List<E> extends Collection<E>

 - List interface found in java.util package and it inherit collection interface.
 - List in java is ordered collection
 - We can store null values in List
 - We can store duplicate elements in list.
 -

# List vs ArrayList

 List is interface whereas ArrayList is implemented class of List interface.

  - ArrayList and LinkedList class provides implementation of List interface


 # Creating ArrayList and LinkedList

 // Creating a list of Strings

 List<String > list = new ArrayList<String>();

 // Creating a list of Integers

 List<Integer> list = new ArrayList<Integer>();

 //Creating List of books

 List<Book> list = new ArrayList<Book>();

 //Creating list of integers

 List<Integer> list = new LinkedList<Integer>();




# HashSet in java

- HashSet is implemented class of Set interface
- HashSet does not allow duplicate elements
- HashSet allows only one null elements
- HashSet is unordered collection it means that it does not maintain the oder of
  object in which they are inserted.
-

# HashMap In java
- HashMap in java is part of java collection framework
- HashMap provides implementation of Map interface in java.
- HashMap stores data as a key value pairs.
- Each key is associated with value and we can access value by corresponding key.
- HashMap is not not synchronized and hence faster for most of the use cases.
- HashMap can store only one null key as object but there can be any number of null values.
- HashMap does not allows duplicate keys, if we try to insert duplicate keys it will replace it with existing
  values of corresponding keys

# ConcurrentHashMap in java

- When to use concurrentHashMap in java?

-
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 # Lambada Expressions

 - Lambada expression is anonymous function which doesn't have function name, return type, access modifier and which does not return any value.
 - Lambada expression also called as nameless function.
 - Lambada Expression is Short block of code which takes the parameter and returns the value.
 - Lambada Expression are similar to methods but they do not need name and it can be implemented right in the body of method.
 -
 - Simple lambada expression contains single parameter and an expression :

   parameter -> expression

   -To use more than one parameter wrap them in parentheses:
   (parameter1, parameter2) -> expression

   - Expression are limited they have to immediately return the value.

   - If the Lambada expression need to return the value then code block should have the return statement

   (parameter1, parameter2)n -> { code block }

  -In lambada expression no need to define data types of variables
   Java  compiler automatically find the data types of variables based on context.


     (a,b) -> System.out.println(a+b);


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Functional Interface In Java

 - Functional Interface is used to invoke lambada expression in java.

 - A interface which contains only one single abstract method called as functional interface.

 - From java 8 we can declare default and static methods in interface.

 - Default functional interfaces in java :

     1) Runnable  having run() abstract method
     2) Callable  having call() abstract method
     3) Comparable having compareTo() abstract method.
     4) ActionListener having actionPerformed() abstract method.

